/* The following code was generated by JFlex 1.4.3 on 25/10/21 22:56 */

package Controladores;
import ClasesFlexCup.Elementos;
import static ClasesFlexCup.Elementos.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25/10/21 22:56 from the specification file
 * <tt>D:/Ensamblador/ProyectoEnsamblador/src/ArchivosFlexCup/MAELEX.flex</tt>
 */
class MAELEX {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\74\2\0\1\10\22\0\1\32\1\0\1\76\1\0"+
    "\1\104\2\0\1\77\1\100\1\101\1\7\1\0\1\2\1\0\1\46"+
    "\1\0\1\5\1\6\10\4\1\75\1\73\3\0\1\105\1\106\1\40"+
    "\1\14\1\41\1\13\1\22\1\3\1\43\1\72\1\60\1\66\1\42"+
    "\1\62\1\44\1\45\1\50\1\54\1\23\1\52\1\36\1\37\1\24"+
    "\1\64\1\16\1\70\1\56\1\1\1\102\1\0\1\103\1\0\1\3"+
    "\1\0\1\27\1\12\1\30\1\11\1\17\1\3\1\33\1\71\1\57"+
    "\1\65\1\31\1\61\1\34\1\35\1\47\1\53\1\20\1\51\1\25"+
    "\1\26\1\21\1\63\1\15\1\67\1\55\1\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\3\3\1\4\1\2\24\1\1\4"+
    "\14\1\1\2\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\1\1\15\1\16\1\15\1\0\1\17"+
    "\2\0\1\4\2\2\3\4\1\20\2\4\1\20\1\4"+
    "\3\3\2\21\1\22\1\23\1\15\1\24\1\15\1\25"+
    "\1\26\1\27\1\30\1\31\1\15\1\32\1\33\1\34"+
    "\2\15\1\25\4\15\1\35\4\15\1\36\1\15\1\37"+
    "\1\40\4\15\1\41\1\42\1\43\1\44\1\15\1\45"+
    "\1\46\1\47\15\15\6\4\1\50\12\15\1\51\1\15"+
    "\1\52\5\15\4\0\1\53\2\0\1\54\3\4\1\54"+
    "\1\4\1\0\2\55\2\15\1\56\6\15\1\57\2\15"+
    "\1\60\2\15\1\61\1\62\1\15\1\63\1\64\1\65"+
    "\1\15\1\66\1\15\1\67\5\15\6\4\1\70\4\15"+
    "\1\71\2\15\1\72\1\73\1\74\1\15\1\53\1\0"+
    "\6\15\1\75\1\76\1\77\12\15\6\4\1\100\1\101"+
    "\2\15\13\0\1\15\1\102\1\103\1\0\1\104\1\15"+
    "\1\0\1\105\1\4\1\106\1\4\2\15\1\107\2\0"+
    "\1\107\12\0\1\110\1\111\15\0\1\112\1\0\1\113"+
    "\26\0\1\105\1\0\1\106\1\0\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\107\0\u01f1\0\u0bed\0\u0c34\0\u01f1"+
    "\0\u01f1\0\u01f1\0\u01f1\0\u0c7b\0\216\0\u0cc2\0\u0d09\0\u0cc2"+
    "\0\u0cc2\0\u0d50\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa"+
    "\0\u0f41\0\u0f88\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb"+
    "\0\u1132\0\u105d\0\u0f41\0\216\0\216\0\u1179\0\216\0\u11c0"+
    "\0\u1207\0\216\0\216\0\216\0\216\0\u124e\0\216\0\216"+
    "\0\216\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1\0\u13f8\0\u143f"+
    "\0\216\0\u1486\0\u14cd\0\u1514\0\u155b\0\216\0\u15a2\0\216"+
    "\0\216\0\u15e9\0\u1630\0\u1677\0\u16be\0\216\0\216\0\216"+
    "\0\216\0\u1705\0\216\0\216\0\216\0\u174c\0\u1793\0\u17da"+
    "\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12"+
    "\0\u1a59\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a"+
    "\0\216\0\u1c91\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\216\0\u1f57\0\216\0\u1f9e\0\u1fe5"+
    "\0\u202c\0\u2073\0\u20ba\0\u2101\0\u0bed\0\u2148\0\u0c34\0\u0c7b"+
    "\0\u218f\0\u21d6\0\107\0\u221d\0\u2264\0\u22ab\0\u0dde\0\u1016"+
    "\0\u22f2\0\u0cc2\0\u0f41\0\u2339\0\u2380\0\216\0\u23c7\0\u240e"+
    "\0\u2455\0\u249c\0\u24e3\0\u252a\0\216\0\u2571\0\u25b8\0\216"+
    "\0\u25ff\0\u2646\0\216\0\216\0\u268d\0\216\0\216\0\216"+
    "\0\u26d4\0\216\0\u271b\0\216\0\u2762\0\u27a9\0\u27f0\0\u2837"+
    "\0\u287e\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\216"+
    "\0\u2a6f\0\u2ab6\0\u2afd\0\u2b44\0\216\0\u2b8b\0\u2bd2\0\216"+
    "\0\216\0\216\0\u0cc2\0\u01f1\0\u2c19\0\u2c60\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\216\0\216\0\216\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089"+
    "\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec\0\u3233\0\216\0\216"+
    "\0\u327a\0\u32c1\0\u3308\0\u334f\0\u3396\0\u33dd\0\u3424\0\u346b"+
    "\0\u34b2\0\u34f9\0\u3540\0\u3587\0\u35ce\0\u3615\0\216\0\u365c"+
    "\0\u36a3\0\216\0\u36ea\0\u3731\0\u01f1\0\u3778\0\u01f1\0\u37bf"+
    "\0\u3806\0\u384d\0\u0cc2\0\u3894\0\u38db\0\107\0\u3922\0\u3969"+
    "\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc\0\u3b13\0\u3b5a\0\u3ba1"+
    "\0\u01f1\0\216\0\u3be8\0\u3c2f\0\u3c76\0\u3cbd\0\u3d04\0\u3d4b"+
    "\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae\0\u3ef5\0\u3f3c\0\u0cc2"+
    "\0\u3f83\0\u0cc2\0\u3fca\0\u4011\0\u4058\0\u409f\0\u40e6\0\u412d"+
    "\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290\0\u42d7\0\u431e\0\u4365"+
    "\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8\0\u450f\0\u4556\0\u459d"+
    "\0\u0cc2\0\u45e4\0\u0cc2\0\u462b\0\u0cc2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\3\1\21\2\3\1\22\1\23\1\24\1\25\1\3"+
    "\1\11\1\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\3\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\3\1\45\1\46\1\47\1\50\2\3"+
    "\1\51\1\52\4\3\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\10\1\2\1\64\110\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\13\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\2\0\1\74\1\10\1\75\5\10\1\75\21\10"+
    "\1\76\40\10\1\74\1\0\1\10\1\74\1\77\4\10"+
    "\1\100\2\74\1\0\1\101\1\102\1\101\3\5\1\103"+
    "\1\70\21\101\1\70\13\101\1\103\24\101\2\0\1\103"+
    "\2\0\4\103\1\104\3\0\1\101\1\105\1\106\1\107"+
    "\1\110\1\111\1\103\1\70\1\106\1\112\1\106\1\112"+
    "\2\101\1\106\2\101\1\106\4\101\2\106\1\101\1\70"+
    "\5\101\2\106\4\101\1\103\24\101\2\0\1\103\2\0"+
    "\4\103\1\104\3\0\1\101\1\102\1\101\1\5\2\7"+
    "\1\103\1\70\1\101\1\113\1\101\1\113\15\101\1\70"+
    "\13\101\1\103\24\101\2\0\1\103\2\0\4\103\1\104"+
    "\2\0\1\74\72\10\1\74\1\0\1\10\2\74\4\10"+
    "\1\100\2\74\1\0\1\70\1\11\5\70\1\11\21\70"+
    "\1\11\40\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\1\65\1\114\2\65"+
    "\1\115\3\65\1\116\3\65\1\117\1\65\1\120\2\65"+
    "\1\70\13\65\1\70\10\65\1\121\1\65\1\122\5\65"+
    "\1\123\1\65\1\124\1\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\4\65\1\125\1\65"+
    "\1\126\3\65\1\127\5\65\1\130\1\65\1\131\1\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\3\65\1\114\1\65"+
    "\1\115\5\65\1\132\5\65\1\70\3\65\1\117\1\65"+
    "\1\133\5\65\1\70\11\65\1\134\1\65\1\122\5\65"+
    "\1\123\1\65\1\124\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\70\13\65\1\70\5\65\1\125\1\65\1\135"+
    "\3\65\1\127\5\65\1\130\1\65\1\131\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\21\65\1\70\13\65\1\70\1\136"+
    "\23\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\1\65\1\137\22\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\7\65\1\140\4\65\1\141\4\65\1\70"+
    "\2\65\1\142\10\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\12\65\1\143\6\65\1\70\3\65\1\141"+
    "\6\65\1\144\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\10\65\1\145\3\65\1\146\1\147\3\65\1\70"+
    "\13\65\1\70\4\65\1\150\3\65\1\151\1\65\1\152"+
    "\11\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\10\65\1\153\13\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\1\154\15\65\1\155\2\65\1\70\13\65"+
    "\1\70\12\65\1\156\5\65\1\157\1\65\1\160\1\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\14\65\1\161\4\65"+
    "\1\70\13\65\1\70\1\162\11\65\1\163\5\65\1\164"+
    "\1\65\1\165\1\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\10\65\1\166\5\65\1\167\2\65\1\70\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\1\170\23\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\13\65\1\171\5\65\1\70\3\65\1\146\1\172"+
    "\6\65\1\70\5\65\1\150\3\65\1\151\1\65\1\173"+
    "\10\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\11\65\1\174\12\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\2\65\1\175\16\65\1\70\5\65\1\176"+
    "\5\65\1\70\13\65\1\156\5\65\1\157\1\65\1\160"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\3\65"+
    "\1\161\7\65\1\70\1\65\1\177\11\65\1\163\5\65"+
    "\1\164\1\65\1\165\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\13\65\1\200\5\65\1\70\5\65\1\201\5\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\1\65\1\202\22\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\2\0\1\74\10\10\1\203"+
    "\1\10\1\204\11\10\1\205\2\10\1\206\5\10\1\207"+
    "\2\10\1\210\31\10\1\74\1\0\1\10\2\74\4\10"+
    "\1\100\2\74\1\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\70\13\65\1\70\2\65\1\211\21\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\70\13\65\1\70"+
    "\3\65\1\211\20\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\6\65\1\212\12\65\1\70\13\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\11\65\1\213\7\65\1\70"+
    "\13\65\1\70\24\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\70\13\65\1\70\2\65\1\214\21\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\70\13\65\1\70"+
    "\3\65\1\215\20\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\1\216\20\65\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\2\65\1\217\16\65\1\70\13\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\6\65"+
    "\1\220\12\65\1\70\13\65\1\70\1\221\23\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\11\65\1\222\7\65\1\70"+
    "\13\65\1\70\1\65\1\223\22\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\14\65\1\224\1\65\1\225\1\226\1\65"+
    "\1\70\1\227\1\65\1\230\10\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\70\3\65\1\224"+
    "\1\65\1\231\1\226\1\65\1\232\1\65\1\233\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\2\0\74\53\1\0\12\53\1\0\72\234\2\0\1\234"+
    "\1\235\1\0\5\234\3\0\72\236\2\0\1\236\1\0"+
    "\1\237\5\236\3\0\1\240\1\0\1\240\5\0\21\240"+
    "\1\0\13\240\1\0\24\240\15\0\72\70\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\1\241\1\70\1\241\3\67"+
    "\2\70\21\241\1\70\13\241\1\70\24\241\2\0\1\71"+
    "\2\0\4\70\1\73\3\0\3\70\3\242\64\70\2\0"+
    "\1\70\2\0\4\70\1\73\3\0\72\70\2\0\1\70"+
    "\2\243\4\70\1\73\2\0\74\74\1\0\13\74\1\10"+
    "\1\75\5\10\1\75\21\10\1\75\40\10\1\74\1\0"+
    "\1\10\2\74\4\10\1\100\3\74\1\10\1\75\1\10"+
    "\3\244\1\10\1\75\21\10\1\75\40\10\1\74\1\0"+
    "\1\10\2\74\4\10\1\100\4\74\1\245\71\74\1\0"+
    "\7\74\1\246\3\74\72\10\1\74\1\0\1\10\2\247"+
    "\4\10\1\100\2\74\1\0\1\101\1\70\1\101\5\70"+
    "\21\101\1\70\13\101\1\70\24\101\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\1\70\1\103\4\70\1\103\36\70"+
    "\1\103\24\70\2\0\1\103\2\0\4\103\1\104\3\0"+
    "\1\70\1\103\4\70\1\103\36\70\1\103\24\70\2\0"+
    "\1\103\2\243\4\103\1\104\3\0\1\70\1\250\1\251"+
    "\1\70\1\251\1\70\1\103\1\70\4\251\2\70\1\251"+
    "\2\70\1\251\4\70\2\251\7\70\2\251\4\70\1\103"+
    "\22\70\2\252\2\0\1\103\2\0\4\103\1\104\3\0"+
    "\1\101\1\251\1\106\1\70\1\251\3\70\4\106\2\101"+
    "\1\106\2\101\1\106\4\101\2\106\1\101\1\70\5\101"+
    "\2\106\4\101\1\70\22\101\2\253\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\1\101\1\102\1\101\3\107\1\103"+
    "\1\70\21\101\1\70\13\101\1\103\22\101\2\253\2\0"+
    "\1\103\2\0\4\103\1\104\3\0\1\101\1\105\1\106"+
    "\1\107\1\110\1\111\1\103\1\70\1\106\1\112\1\106"+
    "\1\112\2\101\1\106\2\101\1\106\4\101\2\106\1\101"+
    "\1\70\5\101\2\106\4\101\1\103\22\101\2\253\2\0"+
    "\1\103\2\0\4\103\1\104\3\0\1\101\1\102\1\101"+
    "\1\107\2\111\1\103\1\70\1\101\1\113\1\101\1\113"+
    "\15\101\1\70\13\101\1\103\22\101\2\253\2\0\1\103"+
    "\2\0\4\103\1\104\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\4\65\1\254\17\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\15\65\1\255\3\65"+
    "\1\70\13\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\14\65\1\256\7\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\15\65\1\257\3\65"+
    "\1\70\13\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\5\65\1\260\16\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\4\65"+
    "\1\261\6\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\15\65\1\256\6\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\4\65"+
    "\1\262\6\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\2\65\1\263\21\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\13\65"+
    "\1\70\3\65\1\264\20\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\10\65\1\265\10\65\1\70\13\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\1\266\20\65\1\70"+
    "\13\65\1\70\24\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\13\65\1\265\5\65\1\70\13\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\2\65\1\267\16\65\1\70"+
    "\13\65\1\70\24\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\1\65\1\270\17\65\1\70\13\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\16\65\1\271\2\65\1\70"+
    "\13\65\1\70\1\272\7\65\1\273\13\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\21\65\1\70\13\65\1\70\10\65"+
    "\1\274\13\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\15\65"+
    "\1\275\3\65\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\1\276\20\65\1\70\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\14\65\1\277"+
    "\4\65\1\70\1\65\1\300\11\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\1\301\20\65\1\70\13\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\21\65"+
    "\1\70\13\65\1\70\12\65\1\302\11\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\17\65\1\303\1\65\1\70\13\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\15\65"+
    "\1\304\3\65\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\3\65\1\270\15\65\1\70\13\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\21\65"+
    "\1\70\5\65\1\305\5\65\1\70\1\65\1\306\7\65"+
    "\1\273\12\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\21\65"+
    "\1\70\13\65\1\70\11\65\1\274\12\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\21\65\1\70\4\65\1\307\6\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\2\65"+
    "\1\276\16\65\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\21\65\1\70\3\65\1\277\5\65"+
    "\1\300\1\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\2\65\1\310\16\65\1\70\13\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\13\65"+
    "\1\70\13\65\1\302\10\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\6\65\1\311\4\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\4\65"+
    "\1\304\6\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\2\0\1\74\26\10\1\312\43\10"+
    "\1\74\1\0\1\10\2\74\4\10\1\100\3\74\37\10"+
    "\1\313\32\10\1\74\1\0\1\10\2\74\4\10\1\100"+
    "\3\74\25\10\1\314\44\10\1\74\1\0\1\10\2\74"+
    "\4\10\1\100\3\74\46\10\1\315\23\10\1\74\1\0"+
    "\1\10\2\74\4\10\1\100\3\74\36\10\1\316\33\10"+
    "\1\74\1\0\1\10\2\74\4\10\1\100\3\74\47\10"+
    "\1\317\22\10\1\74\1\0\1\10\2\74\4\10\1\100"+
    "\2\74\1\0\1\65\1\66\1\65\3\67\2\70\15\65"+
    "\1\320\3\65\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\21\65\1\70\4\65\1\320\6\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\21\65"+
    "\1\70\13\65\1\70\1\321\23\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\70\13\65\1\70\1\65\1\322"+
    "\22\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\10\65\1\323\13\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\70\13\65\1\70\11\65\1\324"+
    "\12\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\14\65\1\325"+
    "\4\65\1\70\13\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\70\13\65\1\70\1\326\23\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\3\65"+
    "\1\325\7\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\1\65\1\327\22\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\6\65\1\330\12\65"+
    "\1\70\13\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\6\65\1\331\12\65\1\70\13\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\16\65\1\332\2\65"+
    "\1\70\13\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\11\65\1\330\7\65\1\70\13\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\11\65\1\331\7\65"+
    "\1\70\13\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\5\65\1\332\5\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\72\234\2\0\1\234\1\243\1\0\5\234\3\0\72\236"+
    "\2\0\1\236\1\0\1\243\5\236\3\0\1\241\1\70"+
    "\4\241\2\70\21\241\1\70\13\241\1\70\24\241\2\0"+
    "\1\71\2\0\4\70\1\73\3\0\3\70\3\242\64\70"+
    "\2\0\1\70\2\0\3\70\1\333\1\73\2\0\1\74"+
    "\3\10\3\244\62\10\2\334\1\74\1\0\1\10\2\74"+
    "\4\10\1\100\76\74\1\0\2\74\1\77\103\74\1\0"+
    "\2\74\1\247\4\74\1\246\2\74\1\0\1\70\2\251"+
    "\1\70\1\251\3\70\4\251\2\70\1\251\2\70\1\251"+
    "\4\70\2\251\7\70\2\251\27\70\2\252\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\21\65\1\70\13\65\1\70\4\65\1\254\17\65"+
    "\2\0\1\71\2\0\1\335\1\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\16\65\1\336"+
    "\2\65\1\70\13\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\6\65\1\337\12\65\1\70\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\5\65\1\260\16\65\2\0\1\71\2\0"+
    "\1\335\1\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\21\65\1\70\5\65\1\340\5\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\11\65"+
    "\1\341\7\65\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\1\342\20\65\1\70\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\2\65\1\343"+
    "\16\65\1\70\13\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\14\65\1\344\4\65\1\70\1\65\1\345"+
    "\11\65\1\70\4\65\1\346\17\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\70\3\65\1\344\5\65\1\345"+
    "\1\65\1\70\5\65\1\346\16\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\17\65\1\347\1\65\1\70\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\14\65\1\350"+
    "\4\65\1\70\13\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\70\13\65\1\70\12\65\1\351"+
    "\11\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\6\65\1\352"+
    "\12\65\1\70\13\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\70\13\65\1\70\2\65\1\353"+
    "\21\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\6\65\1\354\4\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\70\3\65\1\355\7\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\13\65\1\356\10\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\11\65\1\357\7\65\1\70\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\3\65\1\360\20\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\2\0\1\74\25\10\1\361"+
    "\44\10\1\74\1\0\1\10\2\74\4\10\1\100\3\74"+
    "\36\10\1\362\33\10\1\74\1\0\1\10\2\74\4\10"+
    "\1\100\3\74\26\10\1\363\43\10\1\74\1\0\1\10"+
    "\2\74\4\10\1\100\3\74\10\10\1\364\61\10\1\74"+
    "\1\0\1\10\2\74\4\10\1\100\3\74\37\10\1\365"+
    "\32\10\1\74\1\0\1\10\2\74\4\10\1\100\3\74"+
    "\12\10\1\366\57\10\1\74\1\0\1\10\2\74\4\10"+
    "\1\100\2\74\1\0\1\65\1\66\1\65\3\67\2\70"+
    "\17\65\1\367\1\65\1\70\13\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\70\6\65\1\367"+
    "\4\65\1\70\24\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\70\13\65\1\70\14\65\1\370\7\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\70\13\65\1\70"+
    "\15\65\1\370\6\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\70\13\65\1\70\4\65\1\371\17\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\70\13\65\1\70"+
    "\5\65\1\372\16\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\3\70\3\373\64\70\2\0\1\70"+
    "\1\374\1\375\1\376\3\70\1\73\1\377\2\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\u0100\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\u0101"+
    "\13\65\1\70\24\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\u0102\13\65\1\70\24\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\3\0\1\65\1\66\1\65"+
    "\3\67\2\70\21\65\1\u0103\13\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\u0104\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\u0105"+
    "\13\65\1\70\24\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\20\65\1\u0106\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\1\65\1\u0107\17\65\1\70\13\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\1\65\1\66\1\65\3\67\2\70\6\65"+
    "\1\u0108\12\65\1\70\13\65\1\70\24\65\2\0\1\71"+
    "\2\0\2\70\1\72\1\70\1\73\3\0\1\65\1\66"+
    "\1\65\3\67\2\70\21\65\1\u0109\13\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\70\13\65"+
    "\1\70\1\u010a\23\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\70\7\65\1\u010b\3\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\3\65\1\u0107\15\65\1\70"+
    "\13\65\1\70\24\65\2\0\1\71\2\0\2\70\1\72"+
    "\1\70\1\73\3\0\1\65\1\66\1\65\3\67\2\70"+
    "\11\65\1\u0108\7\65\1\70\13\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\u010c\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\1\65\1\66\1\65\3\67\2\70\21\65\1\70"+
    "\13\65\1\70\1\65\1\u010a\22\65\2\0\1\71\2\0"+
    "\2\70\1\72\1\70\1\73\2\0\1\74\26\10\1\u010d"+
    "\43\10\1\74\1\0\1\10\2\74\4\10\1\100\3\74"+
    "\37\10\1\u010d\32\10\1\74\1\0\1\10\2\74\4\10"+
    "\1\100\3\74\27\10\1\u010e\42\10\1\74\1\0\1\10"+
    "\2\74\4\10\1\100\3\74\16\10\1\u010f\53\10\1\74"+
    "\1\0\1\10\2\74\4\10\1\100\3\74\40\10\1\u0110"+
    "\31\10\1\74\1\0\1\10\2\74\4\10\1\100\3\74"+
    "\21\10\1\u010f\50\10\1\74\1\0\1\10\2\74\4\10"+
    "\1\100\2\74\1\0\1\65\1\66\1\65\3\67\2\70"+
    "\21\65\1\70\2\65\1\u0111\10\65\1\70\24\65\2\0"+
    "\1\71\2\0\2\70\1\72\1\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\70\12\65\1\u0112"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\3\0\3\70\3\373\64\70\2\0\1\70\2\0"+
    "\1\70\1\u0113\2\70\1\73\3\0\6\u0114\1\0\36\u0114"+
    "\1\0\24\u0114\3\0\1\374\11\0\6\u0115\1\0\36\u0115"+
    "\1\0\24\u0115\4\0\1\375\10\0\3\70\3\373\64\70"+
    "\2\0\1\70\1\374\1\375\1\376\3\70\1\73\103\0"+
    "\1\u0116\6\0\24\70\1\u0117\45\70\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\52\70\1\u0118\17\70\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\35\70\1\u0119\34\70\2\0"+
    "\1\70\2\0\4\70\1\73\3\0\53\70\1\u011a\16\70"+
    "\2\0\1\70\2\0\4\70\1\73\3\0\52\70\1\u011b"+
    "\17\70\2\0\1\70\2\0\4\70\1\73\3\0\53\70"+
    "\1\u011c\16\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\1\65\1\66\1\65\3\67\2\70\21\65\1\u011d\13\65"+
    "\1\70\24\65\2\0\1\71\2\0\2\70\1\72\1\70"+
    "\1\73\2\0\74\u0108\1\0\12\u0108\1\0\24\70\1\u011e"+
    "\45\70\2\0\1\70\2\0\4\70\1\73\3\0\1\65"+
    "\1\66\1\65\3\67\2\70\21\65\1\u011f\13\65\1\70"+
    "\24\65\2\0\1\71\2\0\2\70\1\72\1\70\1\73"+
    "\3\0\35\70\1\u0120\34\70\2\0\1\70\2\0\4\70"+
    "\1\73\2\0\1\74\30\10\1\u0121\41\10\1\74\1\0"+
    "\1\10\2\74\4\10\1\100\3\74\41\10\1\u0121\30\10"+
    "\1\74\1\0\1\10\2\74\4\10\1\100\2\74\1\0"+
    "\1\65\1\66\1\65\3\67\2\70\6\65\1\u0122\12\65"+
    "\1\70\13\65\1\70\24\65\2\0\1\71\2\0\2\70"+
    "\1\72\1\70\1\73\3\0\1\65\1\66\1\65\3\67"+
    "\2\70\11\65\1\u0122\7\65\1\70\13\65\1\70\24\65"+
    "\2\0\1\71\2\0\2\70\1\72\1\70\1\73\3\0"+
    "\6\u0114\1\0\36\u0114\1\0\24\u0114\11\0\1\u0123\3\0"+
    "\6\u0115\1\0\36\u0115\1\0\24\u0115\11\0\1\u0124\3\0"+
    "\16\70\1\u0125\53\70\2\0\1\70\2\0\4\70\1\73"+
    "\3\0\25\70\1\u0126\44\70\2\0\1\70\2\0\4\70"+
    "\1\73\3\0\21\70\1\u0127\50\70\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\36\70\1\u0128\33\70\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\25\70\1\u0129\44\70\2\0"+
    "\1\70\2\0\4\70\1\73\3\0\36\70\1\u012a\33\70"+
    "\2\0\1\70\2\0\4\70\1\73\3\0\24\70\1\u012b"+
    "\45\70\2\0\1\70\2\0\4\70\1\73\3\0\16\70"+
    "\1\u012c\53\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\35\70\1\u012d\34\70\2\0\1\70\2\0\4\70\1\73"+
    "\3\0\21\70\1\u012e\50\70\2\0\1\70\2\0\4\70"+
    "\1\73\100\0\1\377\107\0\1\377\10\0\32\70\1\u012f"+
    "\37\70\2\0\1\70\2\0\4\70\1\73\3\0\50\70"+
    "\1\u0130\21\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\42\70\1\u0131\27\70\2\0\1\70\2\0\4\70\1\73"+
    "\3\0\51\70\1\u0130\20\70\2\0\1\70\2\0\4\70"+
    "\1\73\3\0\50\70\1\u0132\21\70\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\51\70\1\u0132\20\70\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\16\70\1\u0133\53\70\2\0"+
    "\1\70\2\0\4\70\1\73\3\0\32\70\1\u0134\37\70"+
    "\2\0\1\70\2\0\4\70\1\73\3\0\21\70\1\u0135"+
    "\50\70\2\0\1\70\2\0\4\70\1\73\3\0\42\70"+
    "\1\u0136\27\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\33\70\1\u0137\36\70\2\0\1\70\2\0\4\70\1\73"+
    "\3\0\43\70\1\u0138\26\70\2\0\1\70\2\0\4\70"+
    "\1\73\3\0\32\70\1\u0139\37\70\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\33\70\1\u013a\36\70\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\42\70\1\u013b\27\70\2\0"+
    "\1\70\2\0\4\70\1\73\3\0\43\70\1\u013c\26\70"+
    "\2\0\1\70\2\0\4\70\1\73\3\0\16\70\1\u013d"+
    "\53\70\2\0\1\70\2\0\4\70\1\73\3\0\21\70"+
    "\1\u013e\50\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\33\70\1\u013f\36\70\2\0\1\70\2\0\4\70\1\73"+
    "\3\0\16\70\1\u0140\53\70\2\0\1\70\2\0\4\70"+
    "\1\73\3\0\43\70\1\u0141\26\70\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\21\70\1\u0142\50\70\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\34\70\1\u0143\35\70\2\0"+
    "\1\70\2\0\4\70\1\73\3\0\44\70\1\u0144\25\70"+
    "\2\0\1\70\2\0\4\70\1\73\3\0\16\70\1\u0145"+
    "\53\70\2\0\1\70\2\0\4\70\1\73\3\0\34\70"+
    "\1\u0146\35\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\21\70\1\u0147\50\70\2\0\1\70\2\0\4\70\1\73"+
    "\3\0\44\70\1\u0148\25\70\2\0\1\70\2\0\4\70"+
    "\1\73\3\0\25\70\1\u0149\44\70\2\0\1\70\2\0"+
    "\4\70\1\73\3\0\36\70\1\u0149\33\70\2\0\1\70"+
    "\2\0\4\70\1\73\3\0\34\70\1\u014a\35\70\2\0"+
    "\1\70\2\0\4\70\1\73\3\0\25\70\1\u014b\44\70"+
    "\2\0\1\70\2\0\4\70\1\73\3\0\44\70\1\u014c"+
    "\25\70\2\0\1\70\2\0\4\70\1\73\3\0\36\70"+
    "\1\u014b\33\70\2\0\1\70\2\0\4\70\1\73\3\0"+
    "\25\70\1\u014d\44\70\2\0\1\70\2\0\4\70\1\73"+
    "\3\0\36\70\1\u014d\33\70\2\0\1\70\2\0\4\70"+
    "\1\73\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18034];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\51\1\1\11\13\1\1\0\1\1\2\0"+
    "\140\1\4\0\1\1\2\0\1\11\5\1\1\0\63\1"+
    "\1\0\35\1\13\0\3\1\1\0\2\1\1\0\7\1"+
    "\2\0\1\11\12\0\2\1\15\0\1\1\1\0\1\1"+
    "\26\0\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String maeLexMe;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MAELEX(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MAELEX(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Elementos yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { maeLexMe=yytext(); return DUP;
          }
        case 76: break;
        case 19: 
          { maeLexMe=yytext(); return DW;
          }
        case 77: break;
        case 53: 
          { maeLexMe=yytext(); return AAM;
          }
        case 78: break;
        case 10: 
          { maeLexMe=yytext(); return Parentesis_c;
          }
        case 79: break;
        case 42: 
          { maeLexMe=yytext(); return JC;
          }
        case 80: break;
        case 52: 
          { maeLexMe=yytext(); return AAS;
          }
        case 81: break;
        case 4: 
          { maeLexMe=yytext(); return Separadores;
          }
        case 82: break;
        case 16: 
          { maeLexMe=yytext(); maeLexMe=maeLexMe.replace(",", ""); return ConstanteDec;
          }
        case 83: break;
        case 73: 
          { maeLexMe=yytext(); return LOOPNE;
          }
        case 84: break;
        case 72: 
          { maeLexMe=yytext(); return STACK;
          }
        case 85: break;
        case 2: 
          { /*Ignorar*/
          }
        case 86: break;
        case 75: 
          { maeLexMe=yytext(); return WORD_PTR;
          }
        case 87: break;
        case 30: 
          { maeLexMe=yytext(); return SS;
          }
        case 88: break;
        case 62: 
          { maeLexMe=yytext(); return ENDM;
          }
        case 89: break;
        case 7: 
          { maeLexMe=yytext(); return Comilla_d;
          }
        case 90: break;
        case 25: 
          { maeLexMe=yytext(); return BP;
          }
        case 91: break;
        case 61: 
          { maeLexMe=yytext(); return ENDS;
          }
        case 92: break;
        case 56: 
          { maeLexMe=yytext(); return RET;
          }
        case 93: break;
        case 57: 
          { maeLexMe=yytext(); return LES;
          }
        case 94: break;
        case 21: 
          { maeLexMe=yytext(); return DI;
          }
        case 95: break;
        case 12: 
          { maeLexMe=yytext(); return Corchete_c;
          }
        case 96: break;
        case 47: 
          { maeLexMe=yytext(); return EQU;
          }
        case 97: break;
        case 1: 
          { return ERROR;
          }
        case 98: break;
        case 9: 
          { maeLexMe=yytext(); return Parentesis_a;
          }
        case 99: break;
        case 43: 
          { maeLexMe=yytext(); maeLexMe=maeLexMe.replace(", ", ""); return ERROR;
          }
        case 100: break;
        case 59: 
          { maeLexMe=yytext(); return JGE;
          }
        case 101: break;
        case 46: 
          { maeLexMe=yytext(); return DIV;
          }
        case 102: break;
        case 51: 
          { maeLexMe=yytext(); return ADD;
          }
        case 103: break;
        case 18: 
          { maeLexMe=yytext(); return DB;
          }
        case 104: break;
        case 24: 
          { maeLexMe=yytext(); return DH;
          }
        case 105: break;
        case 41: 
          { maeLexMe=yytext(); return JS;
          }
        case 106: break;
        case 40: 
          { maeLexMe=yytext(); return OR;
          }
        case 107: break;
        case 39: 
          { maeLexMe=yytext(); return CH;
          }
        case 108: break;
        case 66: 
          { maeLexMe=yytext(); return STOSB;
          }
        case 109: break;
        case 69: 
          { maeLexMe=yytext(); return DATA;
          }
        case 110: break;
        case 64: 
          { maeLexMe=yytext(); return PROC;
          }
        case 111: break;
        case 28: 
          { maeLexMe=yytext(); return BH;
          }
        case 112: break;
        case 44: 
          { maeLexMe=yytext(); return Cadena;
          }
        case 113: break;
        case 15: 
          { maeLexMe=yytext();  maeLexMe=maeLexMe.replace(":", ""); return Etiqueta;
          }
        case 114: break;
        case 35: 
          { maeLexMe=yytext(); return AH;
          }
        case 115: break;
        case 65: 
          { maeLexMe=yytext(); return IDIV;
          }
        case 116: break;
        case 49: 
          { maeLexMe=yytext(); return STI;
          }
        case 117: break;
        case 45: 
          { maeLexMe=yytext(); return maeLexMe.length()==4 || maeLexMe.length()==6 ? ConstanteHex : ERROR;
          }
        case 118: break;
        case 58: 
          { maeLexMe=yytext(); return JAE;
          }
        case 119: break;
        case 67: 
          { maeLexMe=yytext(); return TITLE;
          }
        case 120: break;
        case 17: 
          { maeLexMe=yytext(); return maeLexMe.length()==9 || maeLexMe.length()==17 ? ConstanteBin : ERROR;
          }
        case 121: break;
        case 29: 
          { maeLexMe=yytext(); return ES;
          }
        case 122: break;
        case 11: 
          { maeLexMe=yytext(); return Corchete_a;
          }
        case 123: break;
        case 20: 
          { maeLexMe=yytext(); return DS;
          }
        case 124: break;
        case 48: 
          { maeLexMe=yytext(); return SUB;
          }
        case 125: break;
        case 3: 
          { maeLexMe=yytext(); return ConstanteDec;
          }
        case 126: break;
        case 31: 
          { maeLexMe=yytext(); return SP;
          }
        case 127: break;
        case 36: 
          { maeLexMe=yytext(); return CS;
          }
        case 128: break;
        case 63: 
          { maeLexMe=yytext(); return ENDP;
          }
        case 129: break;
        case 5: 
          { return Linea;
          }
        case 130: break;
        case 68: 
          { maeLexMe=yytext(); return MACRO;
          }
        case 131: break;
        case 6: 
          { maeLexMe=yytext(); return Dos_puntos;
          }
        case 132: break;
        case 74: 
          { maeLexMe=yytext(); return BYTE_PTR;
          }
        case 133: break;
        case 8: 
          { maeLexMe=yytext(); return Comilla_s;
          }
        case 134: break;
        case 22: 
          { maeLexMe=yytext(); return DL;
          }
        case 135: break;
        case 55: 
          { maeLexMe=yytext(); return NOT;
          }
        case 136: break;
        case 32: 
          { maeLexMe=yytext(); return SI;
          }
        case 137: break;
        case 50: 
          { maeLexMe=yytext(); return SLI;
          }
        case 138: break;
        case 60: 
          { maeLexMe=yytext(); return JNA;
          }
        case 139: break;
        case 13: 
          { maeLexMe=yytext(); return Simbolo;
          }
        case 140: break;
        case 37: 
          { maeLexMe=yytext(); return CL;
          }
        case 141: break;
        case 23: 
          { maeLexMe=yytext(); return DX;
          }
        case 142: break;
        case 14: 
          { maeLexMe=yytext(); maeLexMe=maeLexMe.replace(",", ""); return SinComa;
          }
        case 143: break;
        case 26: 
          { maeLexMe=yytext(); return BL;
          }
        case 144: break;
        case 38: 
          { maeLexMe=yytext(); return CX;
          }
        case 145: break;
        case 33: 
          { maeLexMe=yytext(); return AL;
          }
        case 146: break;
        case 54: 
          { maeLexMe=yytext(); return MUL;
          }
        case 147: break;
        case 70: 
          { maeLexMe=yytext(); return CODE;
          }
        case 148: break;
        case 27: 
          { maeLexMe=yytext(); return BX;
          }
        case 149: break;
        case 34: 
          { maeLexMe=yytext(); return AX;
          }
        case 150: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
