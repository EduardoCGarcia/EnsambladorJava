
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 25 23:24:22 CDT 2021
//----------------------------------------------------

package ClasesFlexCup;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 25 23:24:22 CDT 2021
  */
public class MAESintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MAESintax() {super();}

  /** Constructor which sets the default scanner. */
  public MAESintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MAESintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0228\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\006\000\002" +
    "\006\006\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\007\004\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\011" +
    "\004\000\002\011\004\000\002\011\004\000\002\011\004" +
    "\000\002\011\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0283\000\076\006\044\010\034\011\014\012\024\013" +
    "\013\015\011\016\042\017\012\022\010\023\025\024\040" +
    "\025\004\026\041\027\021\030\020\031\022\032\032\033" +
    "\016\034\033\035\037\036\017\037\046\040\007\041\031" +
    "\042\015\043\050\044\035\045\027\112\030\113\023\001" +
    "\002\000\004\002\uffdd\001\002\000\004\002\u0285\001\002" +
    "\000\004\002\ufff5\001\002\000\004\112\u0284\001\002\000" +
    "\004\002\uffda\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\ufffd\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufffc\001\002\000\004\112\u0283\001\002\000\054\046\u0271" +
    "\047\u027b\050\u0276\051\u027a\052\u0281\053\u0280\054\u0282\055" +
    "\u0272\056\u0270\057\u0273\060\u027c\061\u0277\062\u027d\063\u0279" +
    "\064\u0278\065\u027f\066\u0275\067\u026e\070\u0274\071\u027e\112" +
    "\u026f\001\002\000\044\046\u01c2\047\u01bf\050\u01bb\051\u01be" +
    "\052\u01c9\053\u01c6\054\u01c7\055\u01c4\056\u01c0\057\u01c1\060" +
    "\u01bd\061\u01ba\062\u01ca\063\u01bc\064\u01c5\065\u01c3\112\u01c8" +
    "\001\002\000\054\046\u01a8\047\u01b0\050\u01ad\051\u01b1\052" +
    "\u01b8\053\u01b7\054\u01b9\055\u01a9\056\u01a7\057\u01aa\060\u01b3" +
    "\061\u01ae\062\u01b4\063\u01b2\064\u01af\065\u01b6\066\u01ac\067" +
    "\u01a5\070\u01ab\071\u01b5\112\u01a6\001\002\000\004\002\uffdf" +
    "\001\002\000\054\046\u0193\047\u019d\050\u0198\051\u019c\052" +
    "\u01a3\053\u01a2\054\u01a4\055\u0194\056\u0192\057\u0195\060\u019e" +
    "\061\u0199\062\u019f\063\u019b\064\u019a\065\u01a1\066\u0197\067" +
    "\u0190\070\u0196\071\u01a0\112\u0191\001\002\000\004\002\ufff7" +
    "\001\002\000\004\002\ufffa\001\002\000\004\002\uffdb\001" +
    "\002\000\004\002\uffff\001\002\000\004\112\u018f\001\002" +
    "\000\010\005\u017c\006\u017d\007\u017e\001\002\000\004\112" +
    "\u017b\001\002\000\054\046\u0169\047\u0171\050\u016e\051\u0172" +
    "\052\u0179\053\u0178\054\u017a\055\u016a\056\u0168\057\u016b\060" +
    "\u0174\061\u016f\062\u0175\063\u0173\064\u0170\065\u0177\066\u016d" +
    "\067\u0166\070\u016c\071\u0176\112\u0167\001\002\000\042\046" +
    "\u010f\047\u010b\050\u0107\051\u010a\052\u0114\053\u0112\054\u0113" +
    "\055\u010e\056\u010c\057\u010d\060\u0109\061\u0106\062\u0115\063" +
    "\u0108\064\u0111\065\u0110\001\002\000\004\002\000\001\002" +
    "\000\004\112\u0105\001\002\000\004\002\ufff8\001\002\000" +
    "\042\046\355\047\352\050\346\051\350\052\363\053\361" +
    "\054\362\055\357\056\353\057\354\060\351\061\345\062" +
    "\364\063\347\064\360\065\356\001\002\000\004\002\uffdc" +
    "\001\002\000\004\002\uffde\001\002\000\004\112\344\001" +
    "\002\000\004\002\ufff6\001\002\000\010\107\336\110\337" +
    "\111\340\001\002\000\004\002\ufffb\001\002\000\044\046" +
    "\063\047\057\050\053\051\056\052\071\053\066\054\067" +
    "\055\062\056\060\057\061\060\055\061\052\062\072\063" +
    "\054\064\065\065\064\112\070\001\002\000\004\002\ufff4" +
    "\001\002\000\004\112\051\001\002\000\004\002\uff82\001" +
    "\002\000\020\050\335\053\327\056\330\107\331\110\332" +
    "\111\334\112\333\001\002\000\020\053\320\056\322\061" +
    "\323\107\321\110\324\111\326\112\325\001\002\000\030" +
    "\046\311\051\305\054\315\057\307\062\317\064\312\065" +
    "\310\107\314\110\306\111\313\112\316\001\002\000\020" +
    "\047\276\052\300\055\301\107\277\110\302\111\304\112" +
    "\303\001\002\000\030\046\266\054\273\057\265\062\275" +
    "\063\263\064\270\065\267\107\272\110\264\111\271\112" +
    "\274\001\002\000\020\052\255\055\256\060\261\107\254" +
    "\110\257\111\262\112\260\001\002\000\020\050\253\053" +
    "\245\061\247\107\246\110\250\111\252\112\251\001\002" +
    "\000\030\046\235\051\233\054\243\062\244\063\232\064" +
    "\237\065\236\107\241\110\234\111\240\112\242\001\002" +
    "\000\020\047\223\052\225\060\230\107\224\110\226\111" +
    "\231\112\227\001\002\000\030\051\211\054\221\057\213" +
    "\062\222\063\210\064\215\065\214\107\217\110\212\111" +
    "\216\112\220\001\002\000\030\046\201\051\176\054\206" +
    "\057\200\062\207\063\175\064\202\107\204\110\177\111" +
    "\203\112\205\001\002\000\030\046\166\051\163\054\172" +
    "\057\165\062\174\063\162\065\167\107\171\110\164\111" +
    "\170\112\173\001\002\000\020\050\161\056\154\061\155" +
    "\107\153\110\156\111\160\112\157\001\002\000\030\046" +
    "\145\051\141\057\143\062\152\063\140\064\146\065\144" +
    "\107\150\110\142\111\147\112\151\001\002\000\050\046" +
    "\116\047\124\050\121\051\125\052\135\053\133\054\136" +
    "\055\117\056\115\057\120\060\127\061\122\062\130\063" +
    "\126\064\123\065\132\107\134\110\137\111\131\001\002" +
    "\000\020\047\106\055\110\060\113\107\107\110\111\111" +
    "\114\112\112\001\002\000\030\046\077\051\074\054\105" +
    "\057\076\063\073\064\101\065\100\107\103\110\075\111" +
    "\102\112\104\001\002\000\004\002\ufe5c\001\002\000\004" +
    "\002\ufe5f\001\002\000\004\002\ufdff\001\002\000\004\002" +
    "\ufe5d\001\002\000\004\002\ufe60\001\002\000\004\002\ufe5b" +
    "\001\002\000\004\002\ufe5a\001\002\000\004\002\ufdfe\001" +
    "\002\000\004\002\ufe00\001\002\000\004\002\ufe28\001\002" +
    "\000\004\002\ufe5e\001\002\000\004\002\ufe41\001\002\000" +
    "\004\002\ufdf1\001\002\000\004\002\ufe40\001\002\000\004" +
    "\002\ufdf0\001\002\000\004\002\ufe23\001\002\000\004\002" +
    "\ufe3f\001\002\000\004\002\ufdef\001\002\000\004\002\ufe0e" +
    "\001\002\000\004\002\ufe1c\001\002\000\004\002\ufe12\001" +
    "\002\000\004\002\ufe19\001\002\000\004\002\ufe10\001\002" +
    "\000\004\002\ufe0d\001\002\000\004\002\ufe15\001\002\000" +
    "\004\002\ufe14\001\002\000\004\002\ufe1b\001\002\000\004" +
    "\002\ufe17\001\002\000\004\002\ufe11\001\002\000\004\002" +
    "\ufe18\001\002\000\004\002\ufdda\001\002\000\004\002\ufe16" +
    "\001\002\000\004\002\ufe0f\001\002\000\004\002\ufddc\001" +
    "\002\000\004\002\ufe13\001\002\000\004\002\ufe1a\001\002" +
    "\000\004\002\ufddb\001\002\000\004\002\ufe6a\001\002\000" +
    "\004\002\ufe6d\001\002\000\004\002\ufe05\001\002\000\004" +
    "\002\ufe6c\001\002\000\004\002\ufe69\001\002\000\004\002" +
    "\ufe6e\001\002\000\004\002\ufe68\001\002\000\004\002\ufe04" +
    "\001\002\000\004\002\ufe06\001\002\000\004\002\ufe2a\001" +
    "\002\000\004\002\ufe6b\001\002\000\004\002\ufde5\001\002" +
    "\000\004\002\ufe34\001\002\000\004\002\ufe33\001\002\000" +
    "\004\002\ufde4\001\002\000\004\002\ufe1f\001\002\000\004" +
    "\002\ufde3\001\002\000\004\002\ufe35\001\002\000\004\002" +
    "\ufe46\001\002\000\004\002\ufe4a\001\002\000\004\002\ufdf6" +
    "\001\002\000\004\002\ufe48\001\002\000\004\002\ufe4b\001" +
    "\002\000\004\002\ufe45\001\002\000\004\002\ufdf5\001\002" +
    "\000\004\002\ufdf7\001\002\000\004\002\ufe49\001\002\000" +
    "\004\002\ufe25\001\002\000\004\002\ufe47\001\002\000\004" +
    "\002\ufe4d\001\002\000\004\002\ufe51\001\002\000\004\002" +
    "\ufdf9\001\002\000\004\002\ufe4f\001\002\000\004\002\ufe52" +
    "\001\002\000\004\002\ufe4c\001\002\000\004\002\ufdf8\001" +
    "\002\000\004\002\ufdfa\001\002\000\004\002\ufe26\001\002" +
    "\000\004\002\ufe50\001\002\000\004\002\ufe4e\001\002\000" +
    "\004\002\ufe78\001\002\000\004\002\ufe7c\001\002\000\004" +
    "\002\ufe0b\001\002\000\004\002\ufe7a\001\002\000\004\002" +
    "\ufe77\001\002\000\004\002\ufe76\001\002\000\004\002\ufe0a" +
    "\001\002\000\004\002\ufe0c\001\002\000\004\002\ufe2c\001" +
    "\002\000\004\002\ufe7b\001\002\000\004\002\ufe79\001\002" +
    "\000\004\002\ufe3e\001\002\000\004\002\ufdee\001\002\000" +
    "\004\002\ufe3d\001\002\000\004\002\ufded\001\002\000\004" +
    "\002\ufe22\001\002\000\004\002\ufe3c\001\002\000\004\002" +
    "\ufdec\001\002\000\004\002\ufe63\001\002\000\004\002\ufe66" +
    "\001\002\000\004\002\ufe02\001\002\000\004\002\ufe67\001" +
    "\002\000\004\002\ufe62\001\002\000\004\002\ufe61\001\002" +
    "\000\004\002\ufe01\001\002\000\004\002\ufe03\001\002\000" +
    "\004\002\ufe29\001\002\000\004\002\ufe65\001\002\000\004" +
    "\002\ufe64\001\002\000\004\002\ufe31\001\002\000\004\002" +
    "\ufde2\001\002\000\004\002\ufe30\001\002\000\004\002\ufde1" +
    "\001\002\000\004\002\ufe1e\001\002\000\004\002\ufde0\001" +
    "\002\000\004\002\ufe32\001\002\000\004\002\ufdf4\001\002" +
    "\000\004\002\ufe44\001\002\000\004\002\ufe43\001\002\000" +
    "\004\002\ufdf3\001\002\000\004\002\ufe24\001\002\000\004" +
    "\002\ufe42\001\002\000\004\002\ufdf2\001\002\000\004\002" +
    "\ufe71\001\002\000\004\002\ufe08\001\002\000\004\002\ufe73" +
    "\001\002\000\004\002\ufe75\001\002\000\004\002\ufe70\001" +
    "\002\000\004\002\ufe6f\001\002\000\004\002\ufe07\001\002" +
    "\000\004\002\ufe09\001\002\000\004\002\ufe74\001\002\000" +
    "\004\002\ufe2b\001\002\000\004\002\ufe72\001\002\000\004" +
    "\002\ufe3b\001\002\000\004\002\ufdeb\001\002\000\004\002" +
    "\ufe3a\001\002\000\004\002\ufe39\001\002\000\004\002\ufdea" +
    "\001\002\000\004\002\ufe21\001\002\000\004\002\ufde9\001" +
    "\002\000\004\002\ufe58\001\002\000\004\002\ufdfc\001\002" +
    "\000\004\002\ufe56\001\002\000\004\002\ufe54\001\002\000" +
    "\004\002\ufe59\001\002\000\004\002\ufe53\001\002\000\004" +
    "\002\ufdfb\001\002\000\004\002\ufdfd\001\002\000\004\002" +
    "\ufe57\001\002\000\004\002\ufe27\001\002\000\004\002\ufe55" +
    "\001\002\000\004\002\ufe38\001\002\000\004\002\ufde8\001" +
    "\002\000\004\002\ufe37\001\002\000\004\002\ufe36\001\002" +
    "\000\004\002\ufde7\001\002\000\004\002\ufe20\001\002\000" +
    "\004\002\ufde6\001\002\000\004\002\ufe2e\001\002\000\004" +
    "\002\ufe2d\001\002\000\004\002\ufddf\001\002\000\004\002" +
    "\ufdde\001\002\000\004\002\ufe1d\001\002\000\004\002\ufddd" +
    "\001\002\000\004\002\ufe2f\001\002\000\004\105\343\001" +
    "\002\000\004\105\342\001\002\000\004\105\341\001\002" +
    "\000\004\002\ufff1\001\002\000\004\002\ufff2\001\002\000" +
    "\004\002\ufff3\001\002\000\004\002\uffe0\001\002\000\004" +
    "\112\u0104\001\002\000\004\112\u0103\001\002\000\004\112" +
    "\u0102\001\002\000\004\112\u0101\001\002\000\004\112\u0100" +
    "\001\002\000\004\112\377\001\002\000\004\112\376\001" +
    "\002\000\004\112\375\001\002\000\004\112\374\001\002" +
    "\000\004\112\373\001\002\000\004\112\372\001\002\000" +
    "\004\112\371\001\002\000\004\112\370\001\002\000\004" +
    "\112\367\001\002\000\004\112\366\001\002\000\004\112" +
    "\365\001\002\000\004\002\uff2b\001\002\000\004\002\uff26" +
    "\001\002\000\004\002\uff2d\001\002\000\004\002\uff22\001" +
    "\002\000\004\002\uff28\001\002\000\004\002\uff25\001\002" +
    "\000\004\002\uff29\001\002\000\004\002\uff2f\001\002\000" +
    "\004\002\uff2c\001\002\000\004\002\uff21\001\002\000\004" +
    "\002\uff27\001\002\000\004\002\uff24\001\002\000\004\002" +
    "\uff2e\001\002\000\004\002\uff2a\001\002\000\004\002\uff23" +
    "\001\002\000\004\002\uff20\001\002\000\004\002\uff81\001" +
    "\002\000\010\050\u0165\053\u0163\056\u0164\001\002\000\010" +
    "\053\u0160\056\u0161\061\u0162\001\002\000\020\046\u015d\051" +
    "\u015f\054\u0159\057\u015a\062\u015b\064\u015e\065\u015c\001\002" +
    "\000\010\047\u0156\052\u0157\055\u0158\001\002\000\020\046" +
    "\u0154\054\u014f\057\u0150\062\u0151\063\u0152\064\u0155\065\u0153" +
    "\001\002\000\010\052\u014c\055\u014d\060\u014e\001\002\000" +
    "\010\050\u014b\053\u0149\061\u014a\001\002\000\020\046\u0146" +
    "\051\u0148\054\u0142\062\u0143\063\u0144\064\u0147\065\u0145\001" +
    "\002\000\010\047\u013f\052\u0140\060\u0141\001\002\000\020" +
    "\051\u013e\054\u0138\057\u0139\062\u013a\063\u013c\064\u013d\065" +
    "\u013b\001\002\000\020\046\u0135\051\u0137\054\u0131\057\u0132" +
    "\062\u0133\063\u0134\064\u0136\001\002\000\020\046\u012f\051" +
    "\u0130\054\u012a\057\u012b\062\u012c\063\u012d\065\u012e\001\002" +
    "\000\010\050\u0129\056\u0127\061\u0128\001\002\000\020\046" +
    "\u0124\051\u0126\057\u0120\062\u0121\063\u0122\064\u0125\065\u0123" +
    "\001\002\000\010\047\u011d\055\u011e\060\u011f\001\002\000" +
    "\020\046\u011a\051\u011c\054\u0116\057\u0117\063\u0118\064\u011b" +
    "\065\u0119\001\002\000\004\002\uff61\001\002\000\004\002" +
    "\uff60\001\002\000\004\002\uff5f\001\002\000\004\002\uff5e" +
    "\001\002\000\004\002\uff63\001\002\000\004\002\uff5d\001" +
    "\002\000\004\002\uff62\001\002\000\004\002\uff44\001\002" +
    "\000\004\002\uff43\001\002\000\004\002\uff42\001\002\000" +
    "\004\002\uff6f\001\002\000\004\002\uff6e\001\002\000\004" +
    "\002\uff6d\001\002\000\004\002\uff6c\001\002\000\004\002" +
    "\uff71\001\002\000\004\002\uff6b\001\002\000\004\002\uff70" +
    "\001\002\000\004\002\uff37\001\002\000\004\002\uff36\001" +
    "\002\000\004\002\uff38\001\002\000\004\002\uff4c\001\002" +
    "\000\004\002\uff4b\001\002\000\004\002\uff4a\001\002\000" +
    "\004\002\uff49\001\002\000\004\002\uff48\001\002\000\004" +
    "\002\uff4e\001\002\000\004\002\uff4d\001\002\000\004\002" +
    "\uff53\001\002\000\004\002\uff52\001\002\000\004\002\uff51" +
    "\001\002\000\004\002\uff50\001\002\000\004\002\uff55\001" +
    "\002\000\004\002\uff4f\001\002\000\004\002\uff54\001\002" +
    "\000\004\002\uff7e\001\002\000\004\002\uff7d\001\002\000" +
    "\004\002\uff7c\001\002\000\004\002\uff7a\001\002\000\004" +
    "\002\uff7b\001\002\000\004\002\uff79\001\002\000\004\002" +
    "\uff7f\001\002\000\004\002\uff41\001\002\000\004\002\uff40" +
    "\001\002\000\004\002\uff3f\001\002\000\004\002\uff68\001" +
    "\002\000\004\002\uff67\001\002\000\004\002\uff66\001\002" +
    "\000\004\002\uff65\001\002\000\004\002\uff6a\001\002\000" +
    "\004\002\uff64\001\002\000\004\002\uff69\001\002\000\004" +
    "\002\uff34\001\002\000\004\002\uff33\001\002\000\004\002" +
    "\uff35\001\002\000\004\002\uff47\001\002\000\004\002\uff46" +
    "\001\002\000\004\002\uff45\001\002\000\004\002\uff77\001" +
    "\002\000\004\002\uff76\001\002\000\004\002\uff75\001\002" +
    "\000\004\002\uff74\001\002\000\004\002\uff73\001\002\000" +
    "\004\002\uff78\001\002\000\004\002\uff72\001\002\000\004" +
    "\002\uff3e\001\002\000\004\002\uff3d\001\002\000\004\002" +
    "\uff3c\001\002\000\004\002\uff5a\001\002\000\004\002\uff59" +
    "\001\002\000\004\002\uff58\001\002\000\004\002\uff57\001" +
    "\002\000\004\002\uff5c\001\002\000\004\002\uff56\001\002" +
    "\000\004\002\uff5b\001\002\000\004\002\uff3b\001\002\000" +
    "\004\002\uff3a\001\002\000\004\002\uff39\001\002\000\004" +
    "\002\uff31\001\002\000\004\002\uff30\001\002\000\004\002" +
    "\uff32\001\002\000\004\002\uff9e\001\002\000\004\002\uff9b" +
    "\001\002\000\004\002\uffa7\001\002\000\004\002\uffaf\001" +
    "\002\000\004\002\uffa8\001\002\000\004\002\uffa6\001\002" +
    "\000\004\002\uff9d\001\002\000\004\002\uff9f\001\002\000" +
    "\004\002\uffad\001\002\000\004\002\uffa4\001\002\000\004" +
    "\002\uffa1\001\002\000\004\002\uffae\001\002\000\004\002" +
    "\uffac\001\002\000\004\002\uffa2\001\002\000\004\002\uffa5" +
    "\001\002\000\004\002\uffa3\001\002\000\004\002\uff9c\001" +
    "\002\000\004\002\uffa0\001\002\000\004\002\uffaa\001\002" +
    "\000\004\002\uffab\001\002\000\004\002\uffa9\001\002\000" +
    "\004\002\uff84\001\002\000\012\106\u018b\107\u0188\110\u0189" +
    "\111\u018a\001\002\000\010\107\u0182\110\u0183\111\u0184\001" +
    "\002\000\010\107\u017f\110\u0180\111\u0181\001\002\000\004" +
    "\002\uffe3\001\002\000\004\002\uffe2\001\002\000\004\002" +
    "\uffe1\001\002\000\006\002\uffec\105\u0187\001\002\000\006" +
    "\002\uffeb\105\u0186\001\002\000\006\002\uffea\105\u0185\001" +
    "\002\000\004\002\uffe4\001\002\000\004\002\uffe5\001\002" +
    "\000\004\002\uffe6\001\002\000\006\002\uffef\105\u018e\001" +
    "\002\000\006\002\uffee\105\u018d\001\002\000\006\002\uffed" +
    "\105\u018c\001\002\000\004\002\ufff0\001\002\000\004\002" +
    "\uffe7\001\002\000\004\002\uffe8\001\002\000\004\002\uffe9" +
    "\001\002\000\004\002\uff80\001\002\000\004\002\uffb3\001" +
    "\002\000\004\002\uffb0\001\002\000\004\002\uffbc\001\002" +
    "\000\004\002\uffc4\001\002\000\004\002\uffbd\001\002\000" +
    "\004\002\uffbb\001\002\000\004\002\uffb2\001\002\000\004" +
    "\002\uffb4\001\002\000\004\002\uffc2\001\002\000\004\002" +
    "\uffb9\001\002\000\004\002\uffb6\001\002\000\004\002\uffb7" +
    "\001\002\000\004\002\uffc1\001\002\000\004\002\uffc3\001" +
    "\002\000\004\002\uffba\001\002\000\004\002\uffb8\001\002" +
    "\000\004\002\uffb1\001\002\000\004\002\uffb5\001\002\000" +
    "\004\002\uffbf\001\002\000\004\002\uffc0\001\002\000\004" +
    "\002\uffbe\001\002\000\004\002\uffc8\001\002\000\004\002" +
    "\uffc5\001\002\000\004\002\uffd1\001\002\000\004\002\uffd9" +
    "\001\002\000\004\002\uffd2\001\002\000\004\002\uffd0\001" +
    "\002\000\004\002\uffc7\001\002\000\004\002\uffc9\001\002" +
    "\000\004\002\uffd7\001\002\000\004\002\uffce\001\002\000" +
    "\004\002\uffcb\001\002\000\004\002\uffd8\001\002\000\004" +
    "\002\uffd6\001\002\000\004\002\uffcc\001\002\000\004\002" +
    "\uffcf\001\002\000\004\002\uffcd\001\002\000\004\002\uffc6" +
    "\001\002\000\004\002\uffca\001\002\000\004\002\uffd4\001" +
    "\002\000\004\002\uffd5\001\002\000\004\002\uffd3\001\002" +
    "\000\020\050\u026d\053\u0267\056\u0268\107\u0269\110\u026a\111" +
    "\u026c\112\u026b\001\002\000\020\053\u0260\056\u0262\061\u0263" +
    "\107\u0261\110\u0264\111\u0266\112\u0265\001\002\000\030\046" +
    "\u0258\051\u0255\054\u025e\057\u0257\062\u025f\064\u025a\065\u0259" +
    "\107\u025c\110\u0256\111\u025b\112\u025d\001\002\000\020\047" +
    "\u024e\052\u0250\055\u0251\107\u024f\110\u0252\111\u0254\112\u0253" +
    "\001\002\000\030\046\u0246\054\u024c\057\u0245\062\u024d\063" +
    "\u0243\064\u0248\065\u0247\107\u024a\110\u0244\111\u0249\112\u024b" +
    "\001\002\000\020\052\u023d\055\u023e\060\u0241\107\u023c\110" +
    "\u023f\111\u0242\112\u0240\001\002\000\020\050\u023b\053\u0235" +
    "\061\u0237\107\u0236\110\u0238\111\u023a\112\u0239\001\002\000" +
    "\030\046\u022d\051\u022b\054\u0233\062\u0234\063\u022a\064\u022f" +
    "\065\u022e\107\u0231\110\u022c\111\u0230\112\u0232\001\002\000" +
    "\030\051\u0220\054\u0227\057\u0222\062\u0229\063\u021f\064\u0224" +
    "\065\u0223\107\u0226\110\u0221\111\u0225\112\u0228\001\002\000" +
    "\030\046\u0218\051\u0215\054\u021c\057\u0217\062\u021e\063\u0214" +
    "\064\u0219\107\u021b\110\u0216\111\u021a\112\u021d\001\002\000" +
    "\020\047\u020e\052\u020f\060\u0212\107\u020d\110\u0210\111\u0213" +
    "\112\u0211\001\002\000\030\046\u0206\051\u0203\054\u020b\057" +
    "\u0205\062\u020c\063\u0202\065\u0207\107\u0209\110\u0204\111\u0208" +
    "\112\u020a\001\002\000\020\050\u0201\056\u01fc\061\u01fd\107" +
    "\u01fb\110\u01fe\111\u0200\112\u01ff\001\002\000\030\046\u01f4" +
    "\051\u01f1\057\u01f3\062\u01fa\063\u01f0\064\u01f6\065\u01f5\107" +
    "\u01f8\110\u01f2\111\u01f7\112\u01f9\001\002\000\050\046\u01de" +
    "\047\u01e4\050\u01e1\051\u01e5\052\u01ed\053\u01eb\054\u01ee\055" +
    "\u01df\056\u01dd\057\u01e0\060\u01e7\061\u01e2\062\u01e8\063\u01e6" +
    "\064\u01e3\065\u01ea\107\u01ec\110\u01ef\111\u01e9\001\002\000" +
    "\020\047\u01d6\055\u01d8\060\u01da\107\u01d7\110\u01d9\111\u01dc" +
    "\112\u01db\001\002\000\030\046\u01d0\051\u01cc\054\u01d4\057" +
    "\u01ce\063\u01cb\064\u01d1\065\u01cf\107\u01d3\110\u01cd\111\u01d2" +
    "\112\u01d5\001\002\000\004\002\ufeff\001\002\000\004\002" +
    "\uff02\001\002\000\004\002\ufea2\001\002\000\004\002\uff00" +
    "\001\002\000\004\002\ufefe\001\002\000\004\002\uff03\001" +
    "\002\000\004\002\ufefd\001\002\000\004\002\ufea1\001\002" +
    "\000\004\002\ufea3\001\002\000\004\002\uff01\001\002\000" +
    "\004\002\ufecb\001\002\000\004\002\ufee4\001\002\000\004" +
    "\002\ufe94\001\002\000\004\002\ufee3\001\002\000\004\002" +
    "\ufe93\001\002\000\004\002\ufee2\001\002\000\004\002\ufec6" +
    "\001\002\000\004\002\ufe92\001\002\000\004\002\ufeb1\001" +
    "\002\000\004\002\ufebf\001\002\000\004\002\ufeb5\001\002" +
    "\000\004\002\ufebc\001\002\000\004\002\ufeb3\001\002\000" +
    "\004\002\ufeb0\001\002\000\004\002\ufeb8\001\002\000\004" +
    "\002\ufeb7\001\002\000\004\002\ufebe\001\002\000\004\002" +
    "\ufeba\001\002\000\004\002\ufeb4\001\002\000\004\002\ufebb" +
    "\001\002\000\004\002\ufe7d\001\002\000\004\002\ufeb9\001" +
    "\002\000\004\002\ufeb2\001\002\000\004\002\ufe7f\001\002" +
    "\000\004\002\ufeb6\001\002\000\004\002\ufebd\001\002\000" +
    "\004\002\ufe7e\001\002\000\004\002\uff0d\001\002\000\004" +
    "\002\uff10\001\002\000\004\002\ufea8\001\002\000\004\002" +
    "\uff0f\001\002\000\004\002\uff11\001\002\000\004\002\uff0c" +
    "\001\002\000\004\002\uff0b\001\002\000\004\002\ufea7\001" +
    "\002\000\004\002\ufea9\001\002\000\004\002\ufecd\001\002" +
    "\000\004\002\uff0e\001\002\000\004\002\ufe88\001\002\000" +
    "\004\002\ufed7\001\002\000\004\002\ufed6\001\002\000\004" +
    "\002\ufe87\001\002\000\004\002\ufec2\001\002\000\004\002" +
    "\ufe86\001\002\000\004\002\ufed8\001\002\000\004\002\ufee9" +
    "\001\002\000\004\002\ufeed\001\002\000\004\002\ufe99\001" +
    "\002\000\004\002\ufeeb\001\002\000\004\002\ufeee\001\002" +
    "\000\004\002\ufee8\001\002\000\004\002\ufe98\001\002\000" +
    "\004\002\ufe9a\001\002\000\004\002\ufec8\001\002\000\004" +
    "\002\ufeec\001\002\000\004\002\ufeea\001\002\000\004\002" +
    "\ufe91\001\002\000\004\002\ufee1\001\002\000\004\002\ufee0" +
    "\001\002\000\004\002\ufe90\001\002\000\004\002\ufec5\001" +
    "\002\000\004\002\ufedf\001\002\000\004\002\ufe8f\001\002" +
    "\000\004\002\ufef0\001\002\000\004\002\ufef4\001\002\000" +
    "\004\002\ufe9c\001\002\000\004\002\ufef2\001\002\000\004" +
    "\002\ufef5\001\002\000\004\002\ufeef\001\002\000\004\002" +
    "\ufe9b\001\002\000\004\002\ufe9d\001\002\000\004\002\ufef3" +
    "\001\002\000\004\002\ufec9\001\002\000\004\002\ufef1\001" +
    "\002\000\004\002\uff1b\001\002\000\004\002\uff1f\001\002" +
    "\000\004\002\ufeae\001\002\000\004\002\uff1d\001\002\000" +
    "\004\002\uff1a\001\002\000\004\002\uff19\001\002\000\004" +
    "\002\ufead\001\002\000\004\002\ufeaf\001\002\000\004\002" +
    "\uff1e\001\002\000\004\002\ufecf\001\002\000\004\002\uff1c" +
    "\001\002\000\004\002\uff06\001\002\000\004\002\uff09\001" +
    "\002\000\004\002\ufea5\001\002\000\004\002\uff0a\001\002" +
    "\000\004\002\uff05\001\002\000\004\002\uff04\001\002\000" +
    "\004\002\ufea4\001\002\000\004\002\ufea6\001\002\000\004" +
    "\002\ufecc\001\002\000\004\002\uff08\001\002\000\004\002" +
    "\uff07\001\002\000\004\002\ufed4\001\002\000\004\002\ufe85" +
    "\001\002\000\004\002\ufed3\001\002\000\004\002\ufe84\001" +
    "\002\000\004\002\ufec1\001\002\000\004\002\ufe83\001\002" +
    "\000\004\002\ufed5\001\002\000\004\002\ufe97\001\002\000" +
    "\004\002\ufee7\001\002\000\004\002\ufee6\001\002\000\004" +
    "\002\ufe96\001\002\000\004\002\ufec7\001\002\000\004\002" +
    "\ufee5\001\002\000\004\002\ufe95\001\002\000\004\002\uff14" +
    "\001\002\000\004\002\ufeab\001\002\000\004\002\uff16\001" +
    "\002\000\004\002\uff18\001\002\000\004\002\uff13\001\002" +
    "\000\004\002\uff12\001\002\000\004\002\ufeaa\001\002\000" +
    "\004\002\ufeac\001\002\000\004\002\ufece\001\002\000\004" +
    "\002\uff17\001\002\000\004\002\uff15\001\002\000\004\002" +
    "\ufede\001\002\000\004\002\ufe8e\001\002\000\004\002\ufedd" +
    "\001\002\000\004\002\ufedc\001\002\000\004\002\ufe8d\001" +
    "\002\000\004\002\ufec4\001\002\000\004\002\ufe8c\001\002" +
    "\000\004\002\ufefb\001\002\000\004\002\ufe9f\001\002\000" +
    "\004\002\ufef9\001\002\000\004\002\ufefc\001\002\000\004" +
    "\002\ufef7\001\002\000\004\002\ufef6\001\002\000\004\002" +
    "\ufe9e\001\002\000\004\002\ufea0\001\002\000\004\002\ufeca" +
    "\001\002\000\004\002\ufefa\001\002\000\004\002\ufef8\001" +
    "\002\000\004\002\ufedb\001\002\000\004\002\ufe8b\001\002" +
    "\000\004\002\ufeda\001\002\000\004\002\ufed9\001\002\000" +
    "\004\002\ufe8a\001\002\000\004\002\ufec3\001\002\000\004" +
    "\002\ufe89\001\002\000\004\002\ufed1\001\002\000\004\002" +
    "\ufed0\001\002\000\004\002\ufe82\001\002\000\004\002\ufe81" +
    "\001\002\000\004\002\ufec0\001\002\000\004\002\ufe80\001" +
    "\002\000\004\002\ufed2\001\002\000\004\002\uff89\001\002" +
    "\000\004\002\uff86\001\002\000\004\002\uff92\001\002\000" +
    "\004\002\uff9a\001\002\000\004\002\uff93\001\002\000\004" +
    "\002\uff91\001\002\000\004\002\uff88\001\002\000\004\002" +
    "\uff8a\001\002\000\004\002\uff98\001\002\000\004\002\uff8f" +
    "\001\002\000\004\002\uff8c\001\002\000\004\002\uff8d\001" +
    "\002\000\004\002\uff97\001\002\000\004\002\uff99\001\002" +
    "\000\004\002\uff90\001\002\000\004\002\uff8e\001\002\000" +
    "\004\002\uff87\001\002\000\004\002\uff8b\001\002\000\004" +
    "\002\uff95\001\002\000\004\002\uff96\001\002\000\004\002" +
    "\uff94\001\002\000\004\002\uff83\001\002\000\004\002\uff85" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0283\000\020\002\004\004\025\006\044\007\035\010" +
    "\042\011\005\012\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MAESintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MAESintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MAESintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MAESintax$actions {
  private final MAESintax parser;

  /** Constructor */
  CUP$MAESintax$actions(MAESintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MAESintax$do_action(
    int                        CUP$MAESintax$act_num,
    java_cup.runtime.lr_parser CUP$MAESintax$parser,
    java.util.Stack            CUP$MAESintax$stack,
    int                        CUP$MAESintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MAESintax$result;

      /* select the action based on the action number */
      switch (CUP$MAESintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // TwoOpInst ::= SUB Simbolo ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // TwoOpInst ::= SUB Simbolo ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // TwoOpInst ::= SUB Simbolo ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // TwoOpInst ::= SUB DL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // TwoOpInst ::= SUB DL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // TwoOpInst ::= SUB DL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // TwoOpInst ::= SUB CL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // TwoOpInst ::= SUB CL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // TwoOpInst ::= SUB CL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // TwoOpInst ::= SUB BL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // TwoOpInst ::= SUB BL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // TwoOpInst ::= SUB BL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // TwoOpInst ::= SUB AL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // TwoOpInst ::= SUB AL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // TwoOpInst ::= SUB AL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // TwoOpInst ::= SUB DH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // TwoOpInst ::= SUB DH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // TwoOpInst ::= SUB DH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // TwoOpInst ::= SUB CH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // TwoOpInst ::= SUB CH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // TwoOpInst ::= SUB CH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // TwoOpInst ::= SUB BH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // TwoOpInst ::= SUB BH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // TwoOpInst ::= SUB BH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // TwoOpInst ::= SUB AH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // TwoOpInst ::= SUB AH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // TwoOpInst ::= SUB AH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // TwoOpInst ::= SUB SP ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // TwoOpInst ::= SUB SP ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // TwoOpInst ::= SUB SP ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // TwoOpInst ::= SUB BP ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // TwoOpInst ::= SUB BP ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // TwoOpInst ::= SUB BP ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // TwoOpInst ::= SUB DI ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // TwoOpInst ::= SUB DI ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // TwoOpInst ::= SUB DI ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // TwoOpInst ::= SUB SI ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // TwoOpInst ::= SUB SI ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // TwoOpInst ::= SUB SI ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // TwoOpInst ::= SUB DX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // TwoOpInst ::= SUB DX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // TwoOpInst ::= SUB DX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // TwoOpInst ::= SUB CX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // TwoOpInst ::= SUB CX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // TwoOpInst ::= SUB CX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // TwoOpInst ::= SUB BX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // TwoOpInst ::= SUB BX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // TwoOpInst ::= SUB BX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // TwoOpInst ::= SUB AX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // TwoOpInst ::= SUB AX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // TwoOpInst ::= SUB AX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // TwoOpInst ::= SUB Simbolo DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // TwoOpInst ::= SUB Simbolo CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // TwoOpInst ::= SUB Simbolo BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // TwoOpInst ::= SUB Simbolo AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // TwoOpInst ::= SUB Simbolo DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // TwoOpInst ::= SUB Simbolo CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // TwoOpInst ::= SUB Simbolo BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // TwoOpInst ::= SUB Simbolo AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // TwoOpInst ::= SUB Simbolo SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // TwoOpInst ::= SUB Simbolo BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // TwoOpInst ::= SUB Simbolo DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // TwoOpInst ::= SUB Simbolo SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // TwoOpInst ::= SUB Simbolo DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // TwoOpInst ::= SUB Simbolo CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // TwoOpInst ::= SUB Simbolo BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // TwoOpInst ::= SUB Simbolo AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // TwoOpInst ::= SUB DL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // TwoOpInst ::= SUB CL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // TwoOpInst ::= SUB BL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // TwoOpInst ::= SUB AL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // TwoOpInst ::= SUB DH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // TwoOpInst ::= SUB CH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // TwoOpInst ::= SUB BH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // TwoOpInst ::= SUB AH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // TwoOpInst ::= SUB SP Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // TwoOpInst ::= SUB BP Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // TwoOpInst ::= SUB DI Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // TwoOpInst ::= SUB SI Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // TwoOpInst ::= SUB DX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // TwoOpInst ::= SUB CX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // TwoOpInst ::= SUB BX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // TwoOpInst ::= SUB AX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // TwoOpInst ::= SUB DL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // TwoOpInst ::= SUB DL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // TwoOpInst ::= SUB DL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // TwoOpInst ::= SUB CL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // TwoOpInst ::= SUB CL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // TwoOpInst ::= SUB CL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // TwoOpInst ::= SUB BL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // TwoOpInst ::= SUB BL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // TwoOpInst ::= SUB BL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // TwoOpInst ::= SUB AL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // TwoOpInst ::= SUB AL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // TwoOpInst ::= SUB AL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // TwoOpInst ::= SUB DH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // TwoOpInst ::= SUB DH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // TwoOpInst ::= SUB DH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // TwoOpInst ::= SUB CH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // TwoOpInst ::= SUB CH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // TwoOpInst ::= SUB CH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // TwoOpInst ::= SUB BH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // TwoOpInst ::= SUB BH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // TwoOpInst ::= SUB BH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // TwoOpInst ::= SUB AH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // TwoOpInst ::= SUB AH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // TwoOpInst ::= SUB AH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // TwoOpInst ::= SUB SP BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // TwoOpInst ::= SUB SP DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // TwoOpInst ::= SUB SP SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // TwoOpInst ::= SUB SP DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // TwoOpInst ::= SUB SP CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // TwoOpInst ::= SUB SP BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // TwoOpInst ::= SUB SP AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // TwoOpInst ::= SUB BP SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // TwoOpInst ::= SUB BP DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // TwoOpInst ::= SUB BP SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // TwoOpInst ::= SUB BP DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // TwoOpInst ::= SUB BP CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // TwoOpInst ::= SUB BP BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // TwoOpInst ::= SUB BP AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // TwoOpInst ::= SUB DI SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // TwoOpInst ::= SUB DI BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // TwoOpInst ::= SUB DI SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // TwoOpInst ::= SUB DI DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // TwoOpInst ::= SUB DI CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // TwoOpInst ::= SUB DI BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // TwoOpInst ::= SUB DI AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // TwoOpInst ::= SUB SI SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // TwoOpInst ::= SUB SI BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // TwoOpInst ::= SUB SI DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // TwoOpInst ::= SUB SI DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // TwoOpInst ::= SUB SI CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // TwoOpInst ::= SUB SI BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // TwoOpInst ::= SUB SI AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // TwoOpInst ::= SUB DX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // TwoOpInst ::= SUB DX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // TwoOpInst ::= SUB DX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // TwoOpInst ::= SUB DX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // TwoOpInst ::= SUB DX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // TwoOpInst ::= SUB DX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TwoOpInst ::= SUB DX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // TwoOpInst ::= SUB CX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // TwoOpInst ::= SUB CX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // TwoOpInst ::= SUB CX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // TwoOpInst ::= SUB CX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // TwoOpInst ::= SUB CX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // TwoOpInst ::= SUB CX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // TwoOpInst ::= SUB CX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // TwoOpInst ::= SUB BX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // TwoOpInst ::= SUB BX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // TwoOpInst ::= SUB BX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // TwoOpInst ::= SUB BX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // TwoOpInst ::= SUB BX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // TwoOpInst ::= SUB BX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // TwoOpInst ::= SUB BX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // TwoOpInst ::= SUB AX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // TwoOpInst ::= SUB AX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // TwoOpInst ::= SUB AX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // TwoOpInst ::= SUB AX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // TwoOpInst ::= SUB AX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // TwoOpInst ::= SUB AX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // TwoOpInst ::= SUB AX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // TwoOpInst ::= OR Simbolo ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // TwoOpInst ::= OR Simbolo ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // TwoOpInst ::= OR Simbolo ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // TwoOpInst ::= OR DL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // TwoOpInst ::= OR DL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // TwoOpInst ::= OR DL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // TwoOpInst ::= OR CL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // TwoOpInst ::= OR CL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // TwoOpInst ::= OR CL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // TwoOpInst ::= OR BL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // TwoOpInst ::= OR BL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // TwoOpInst ::= OR BL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // TwoOpInst ::= OR AL ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // TwoOpInst ::= OR AL ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // TwoOpInst ::= OR AL ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // TwoOpInst ::= OR DH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // TwoOpInst ::= OR DH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // TwoOpInst ::= OR DH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // TwoOpInst ::= OR CH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // TwoOpInst ::= OR CH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // TwoOpInst ::= OR CH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // TwoOpInst ::= OR BH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // TwoOpInst ::= OR BH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // TwoOpInst ::= OR BH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // TwoOpInst ::= OR AH ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // TwoOpInst ::= OR AH ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // TwoOpInst ::= OR AH ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TwoOpInst ::= OR SP ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TwoOpInst ::= OR SP ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TwoOpInst ::= OR SP ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TwoOpInst ::= OR BP ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TwoOpInst ::= OR BP ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TwoOpInst ::= OR BP ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TwoOpInst ::= OR DI ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TwoOpInst ::= OR DI ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TwoOpInst ::= OR DI ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TwoOpInst ::= OR SI ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TwoOpInst ::= OR SI ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TwoOpInst ::= OR SI ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TwoOpInst ::= OR DX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TwoOpInst ::= OR DX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TwoOpInst ::= OR DX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TwoOpInst ::= OR CX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TwoOpInst ::= OR CX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TwoOpInst ::= OR CX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TwoOpInst ::= OR BX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TwoOpInst ::= OR BX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TwoOpInst ::= OR BX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TwoOpInst ::= OR AX ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TwoOpInst ::= OR AX ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TwoOpInst ::= OR AX ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TwoOpInst ::= OR Simbolo DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TwoOpInst ::= OR Simbolo CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TwoOpInst ::= OR Simbolo BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TwoOpInst ::= OR Simbolo AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TwoOpInst ::= OR Simbolo DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TwoOpInst ::= OR Simbolo CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TwoOpInst ::= OR Simbolo BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TwoOpInst ::= OR Simbolo AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TwoOpInst ::= OR Simbolo SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TwoOpInst ::= OR Simbolo BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TwoOpInst ::= OR Simbolo DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // TwoOpInst ::= OR Simbolo SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // TwoOpInst ::= OR Simbolo DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // TwoOpInst ::= OR Simbolo CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // TwoOpInst ::= OR Simbolo BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // TwoOpInst ::= OR Simbolo AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // TwoOpInst ::= OR DL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // TwoOpInst ::= OR CL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // TwoOpInst ::= OR BL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // TwoOpInst ::= OR AL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // TwoOpInst ::= OR DH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // TwoOpInst ::= OR CH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // TwoOpInst ::= OR BH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // TwoOpInst ::= OR AH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // TwoOpInst ::= OR SP Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // TwoOpInst ::= OR BP Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // TwoOpInst ::= OR DI Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // TwoOpInst ::= OR SI Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // TwoOpInst ::= OR DX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // TwoOpInst ::= OR CX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // TwoOpInst ::= OR BX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // TwoOpInst ::= OR AX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // TwoOpInst ::= OR DL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // TwoOpInst ::= OR DL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // TwoOpInst ::= OR DL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // TwoOpInst ::= OR CL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // TwoOpInst ::= OR CL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // TwoOpInst ::= OR CL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // TwoOpInst ::= OR BL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // TwoOpInst ::= OR BL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // TwoOpInst ::= OR BL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // TwoOpInst ::= OR AL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // TwoOpInst ::= OR AL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // TwoOpInst ::= OR AL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // TwoOpInst ::= OR DH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // TwoOpInst ::= OR DH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // TwoOpInst ::= OR DH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // TwoOpInst ::= OR CH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // TwoOpInst ::= OR CH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // TwoOpInst ::= OR CH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // TwoOpInst ::= OR BH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // TwoOpInst ::= OR BH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // TwoOpInst ::= OR BH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // TwoOpInst ::= OR AH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // TwoOpInst ::= OR AH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // TwoOpInst ::= OR AH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // TwoOpInst ::= OR SP BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // TwoOpInst ::= OR SP DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // TwoOpInst ::= OR SP SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // TwoOpInst ::= OR SP DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // TwoOpInst ::= OR SP CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // TwoOpInst ::= OR SP BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // TwoOpInst ::= OR SP AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // TwoOpInst ::= OR BP SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // TwoOpInst ::= OR BP DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // TwoOpInst ::= OR BP SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // TwoOpInst ::= OR BP DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // TwoOpInst ::= OR BP CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // TwoOpInst ::= OR BP BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // TwoOpInst ::= OR BP AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // TwoOpInst ::= OR DI SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // TwoOpInst ::= OR DI BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // TwoOpInst ::= OR DI SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // TwoOpInst ::= OR DI DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // TwoOpInst ::= OR DI CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // TwoOpInst ::= OR DI BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // TwoOpInst ::= OR DI AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // TwoOpInst ::= OR SI SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // TwoOpInst ::= OR SI BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // TwoOpInst ::= OR SI DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // TwoOpInst ::= OR SI DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // TwoOpInst ::= OR SI CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // TwoOpInst ::= OR SI BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // TwoOpInst ::= OR SI AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // TwoOpInst ::= OR DX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // TwoOpInst ::= OR DX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // TwoOpInst ::= OR DX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // TwoOpInst ::= OR DX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // TwoOpInst ::= OR DX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // TwoOpInst ::= OR DX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // TwoOpInst ::= OR DX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // TwoOpInst ::= OR CX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // TwoOpInst ::= OR CX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // TwoOpInst ::= OR CX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // TwoOpInst ::= OR CX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // TwoOpInst ::= OR CX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // TwoOpInst ::= OR CX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // TwoOpInst ::= OR CX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // TwoOpInst ::= OR BX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // TwoOpInst ::= OR BX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // TwoOpInst ::= OR BX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // TwoOpInst ::= OR BX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // TwoOpInst ::= OR BX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // TwoOpInst ::= OR BX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // TwoOpInst ::= OR BX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // TwoOpInst ::= OR AX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // TwoOpInst ::= OR AX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // TwoOpInst ::= OR AX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // TwoOpInst ::= OR AX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // TwoOpInst ::= OR AX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // TwoOpInst ::= OR AX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // TwoOpInst ::= OR AX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // TwoOpInst ::= LES DL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // TwoOpInst ::= LES CL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // TwoOpInst ::= LES BL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // TwoOpInst ::= LES AL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // TwoOpInst ::= LES DH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // TwoOpInst ::= LES CH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // TwoOpInst ::= LES BH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // TwoOpInst ::= LES AH Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // TwoOpInst ::= LES SP Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // TwoOpInst ::= LES BP Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // TwoOpInst ::= LES DI Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // TwoOpInst ::= LES SI Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // TwoOpInst ::= LES DX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // TwoOpInst ::= LES CX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // TwoOpInst ::= LES BX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // TwoOpInst ::= LES AX Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // TwoOpInst ::= ADD DL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // TwoOpInst ::= ADD DL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // TwoOpInst ::= ADD DL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // TwoOpInst ::= ADD CL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // TwoOpInst ::= ADD CL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // TwoOpInst ::= ADD CL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // TwoOpInst ::= ADD BL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // TwoOpInst ::= ADD BL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // TwoOpInst ::= ADD BL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // TwoOpInst ::= ADD AL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // TwoOpInst ::= ADD AL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // TwoOpInst ::= ADD AL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // TwoOpInst ::= ADD DH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // TwoOpInst ::= ADD DH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // TwoOpInst ::= ADD DH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // TwoOpInst ::= ADD CH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // TwoOpInst ::= ADD CH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // TwoOpInst ::= ADD CH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // TwoOpInst ::= ADD BH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // TwoOpInst ::= ADD BH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // TwoOpInst ::= ADD BH AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // TwoOpInst ::= ADD AH DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // TwoOpInst ::= ADD AH CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // TwoOpInst ::= ADD AH BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // TwoOpInst ::= ADD SP BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // TwoOpInst ::= ADD SP DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // TwoOpInst ::= ADD SP SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // TwoOpInst ::= ADD SP DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // TwoOpInst ::= ADD SP CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // TwoOpInst ::= ADD SP BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // TwoOpInst ::= ADD SP AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // TwoOpInst ::= ADD BP SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // TwoOpInst ::= ADD BP DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // TwoOpInst ::= ADD BP SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // TwoOpInst ::= ADD BP DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // TwoOpInst ::= ADD BP CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // TwoOpInst ::= ADD BP BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // TwoOpInst ::= ADD BP AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // TwoOpInst ::= ADD DI SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // TwoOpInst ::= ADD DI BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // TwoOpInst ::= ADD DI SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // TwoOpInst ::= ADD DI DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // TwoOpInst ::= ADD DI CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // TwoOpInst ::= ADD DI BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // TwoOpInst ::= ADD DI AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // TwoOpInst ::= ADD SI SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // TwoOpInst ::= ADD SI BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // TwoOpInst ::= ADD SI DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // TwoOpInst ::= ADD SI DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // TwoOpInst ::= ADD SI CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // TwoOpInst ::= ADD SI BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // TwoOpInst ::= ADD SI AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // TwoOpInst ::= ADD DX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // TwoOpInst ::= ADD DX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // TwoOpInst ::= ADD DX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // TwoOpInst ::= ADD DX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // TwoOpInst ::= ADD DX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // TwoOpInst ::= ADD DX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // TwoOpInst ::= ADD DX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // TwoOpInst ::= ADD CX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // TwoOpInst ::= ADD CX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // TwoOpInst ::= ADD CX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // TwoOpInst ::= ADD CX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // TwoOpInst ::= ADD CX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // TwoOpInst ::= ADD CX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // TwoOpInst ::= ADD CX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // TwoOpInst ::= ADD BX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // TwoOpInst ::= ADD BX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // TwoOpInst ::= ADD BX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // TwoOpInst ::= ADD BX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // TwoOpInst ::= ADD BX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // TwoOpInst ::= ADD BX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // TwoOpInst ::= ADD BX AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // TwoOpInst ::= ADD AX SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // TwoOpInst ::= ADD AX BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // TwoOpInst ::= ADD AX DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // TwoOpInst ::= ADD AX SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // TwoOpInst ::= ADD AX DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TwoOpInst ::= ADD AX CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TwoOpInst ::= ADD AX BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("TwoOpInst",8, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OneOpInst ::= JAE Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OneOpInst ::= LOOPNE Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OneOpInst ::= JS Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OneOpInst ::= JNA Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OneOpInst ::= JGE Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OneOpInst ::= JC Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OneOpInst ::= NOT Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OneOpInst ::= NOT ES 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // OneOpInst ::= NOT DS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OneOpInst ::= NOT CS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OneOpInst ::= NOT SS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // OneOpInst ::= NOT BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // OneOpInst ::= NOT SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // OneOpInst ::= NOT DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // OneOpInst ::= NOT SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // OneOpInst ::= NOT DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // OneOpInst ::= NOT DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // OneOpInst ::= NOT DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OneOpInst ::= NOT CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OneOpInst ::= NOT CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OneOpInst ::= NOT CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OneOpInst ::= NOT BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OneOpInst ::= NOT BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OneOpInst ::= NOT BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OneOpInst ::= NOT AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OneOpInst ::= NOT AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OneOpInst ::= NOT AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OneOpInst ::= MUL Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OneOpInst ::= MUL ES 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OneOpInst ::= MUL DS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OneOpInst ::= MUL CS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OneOpInst ::= MUL SS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OneOpInst ::= MUL BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OneOpInst ::= MUL SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OneOpInst ::= MUL DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OneOpInst ::= MUL SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OneOpInst ::= MUL DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OneOpInst ::= MUL DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OneOpInst ::= MUL DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OneOpInst ::= MUL CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OneOpInst ::= MUL CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OneOpInst ::= MUL CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OneOpInst ::= MUL BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OneOpInst ::= MUL BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OneOpInst ::= MUL BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OneOpInst ::= MUL AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OneOpInst ::= MUL AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OneOpInst ::= MUL AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OneOpInst ::= DIV Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OneOpInst ::= DIV ES 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OneOpInst ::= DIV DS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OneOpInst ::= DIV CS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OneOpInst ::= DIV SS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OneOpInst ::= DIV BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OneOpInst ::= DIV SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OneOpInst ::= DIV DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OneOpInst ::= DIV SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OneOpInst ::= DIV DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OneOpInst ::= DIV DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OneOpInst ::= DIV DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OneOpInst ::= DIV CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // OneOpInst ::= DIV CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OneOpInst ::= DIV CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OneOpInst ::= DIV BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OneOpInst ::= DIV BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OneOpInst ::= DIV BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OneOpInst ::= DIV AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OneOpInst ::= DIV AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OneOpInst ::= DIV AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OneOpInst ::= IDIV Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OneOpInst ::= IDIV ES 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OneOpInst ::= IDIV DS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OneOpInst ::= IDIV CS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OneOpInst ::= IDIV SS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OneOpInst ::= IDIV BP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OneOpInst ::= IDIV SP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OneOpInst ::= IDIV DI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OneOpInst ::= IDIV SI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OneOpInst ::= IDIV DL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OneOpInst ::= IDIV DH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OneOpInst ::= IDIV DX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OneOpInst ::= IDIV CL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OneOpInst ::= IDIV CH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OneOpInst ::= IDIV CX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OneOpInst ::= IDIV BL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OneOpInst ::= IDIV BH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OneOpInst ::= IDIV BX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OneOpInst ::= IDIV AL 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OneOpInst ::= IDIV AH 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OneOpInst ::= IDIV AX 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("OneOpInst",7, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ZeOpInst ::= STI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("ZeOpInst",6, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ZeOpInst ::= AAM 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("ZeOpInst",6, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ZeOpInst ::= SLI 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("ZeOpInst",6, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ZeOpInst ::= RET 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("ZeOpInst",6, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ZeOpInst ::= STOSB 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("ZeOpInst",6, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ZeOpInst ::= AAS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("ZeOpInst",6, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DefProc ::= PROC Simbolo 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("DefProc",5, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Declaracion ::= Simbolo EQU ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Declaracion ::= Simbolo EQU ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Declaracion ::= Simbolo EQU ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Declaracion ::= Simbolo DW ConstanteHex DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-3)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Declaracion ::= Simbolo DW ConstanteBin DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-3)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Declaracion ::= Simbolo DW ConstanteDec DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-3)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Declaracion ::= Simbolo DB ConstanteHex DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-3)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Declaracion ::= Simbolo DB ConstanteBin DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-3)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Declaracion ::= Simbolo DB ConstanteDec DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-3)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Declaracion ::= Simbolo DW ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Declaracion ::= Simbolo DW ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Declaracion ::= Simbolo DW ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Declaracion ::= Simbolo DB ConstanteHex 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Declaracion ::= Simbolo DB ConstanteBin 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Declaracion ::= Simbolo DB ConstanteDec 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Declaracion ::= Simbolo DB Cadena 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("Declaracion",4, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DeclaraStack ::= DW ConstanteHex DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("DeclaraStack",2, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DeclaraStack ::= DW ConstanteBin DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("DeclaraStack",2, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DeclaraStack ::= DW ConstanteDec DUP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("DeclaraStack",2, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-2)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PROGRAMA ::= TwoOpInst 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PROGRAMA ::= OneOpInst 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PROGRAMA ::= ZeOpInst 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PROGRAMA ::= Etiqueta 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // PROGRAMA ::= DefProc 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // PROGRAMA ::= MACRO 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // PROGRAMA ::= CODE 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // PROGRAMA ::= Declaracion 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PROGRAMA ::= DATA 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= ENDP 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= ENDS 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DeclaraStack 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= STACK 
            {
              Object RESULT =null;

              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          return CUP$MAESintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)).value;
		RESULT = start_val;
              CUP$MAESintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MAESintax$stack.elementAt(CUP$MAESintax$top-1)), ((java_cup.runtime.Symbol)CUP$MAESintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MAESintax$parser.done_parsing();
          return CUP$MAESintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

