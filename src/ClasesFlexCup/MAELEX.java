/* The following code was generated by JFlex 1.4.3 on 17/10/21 22:09 */

package Controladores;
import ClasesFlexCup.Elementos;
import static ClasesFlexCup.Elementos.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/10/21 22:09 from the specification file
 * <tt>D:/Ensamblador/ProyectoEnsamblador/src/ArchivosFlexCup/MAELEX.flex</tt>
 */
class MAELEX {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\10\1\74\2\0\1\10\22\0\1\32\1\0\1\76\1\0"+
    "\1\104\2\0\1\77\1\100\1\101\1\7\1\0\1\2\1\0\1\46"+
    "\1\0\1\5\1\6\10\4\1\75\1\73\3\0\1\105\1\0\1\40"+
    "\1\14\1\41\1\13\1\22\1\3\1\43\1\72\1\60\1\66\1\42"+
    "\1\62\1\44\1\45\1\50\1\54\1\23\1\52\1\36\1\37\1\24"+
    "\1\64\1\16\1\70\1\56\1\1\1\102\1\0\1\103\1\0\1\3"+
    "\1\0\1\27\1\12\1\30\1\11\1\17\1\3\1\33\1\71\1\57"+
    "\1\65\1\31\1\61\1\34\1\35\1\47\1\53\1\20\1\51\1\25"+
    "\1\26\1\21\1\63\1\15\1\67\1\55\1\1\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\3\3\1\4\1\2\24\1\1\4"+
    "\14\1\1\2\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\15\1\0\1\17\2\0"+
    "\1\4\2\2\3\4\1\20\2\4\1\20\1\4\3\3"+
    "\2\21\1\22\1\23\1\15\1\24\1\15\1\25\1\26"+
    "\1\27\1\30\1\31\1\15\1\32\1\33\1\34\2\15"+
    "\1\25\4\15\1\35\4\15\1\36\1\15\1\37\1\40"+
    "\3\15\1\41\1\42\1\43\1\44\1\15\1\45\1\46"+
    "\1\47\11\15\1\45\3\15\6\4\1\50\12\15\1\51"+
    "\1\15\1\52\5\15\6\0\1\53\3\4\1\53\1\4"+
    "\1\0\2\54\2\15\1\55\6\15\1\56\2\15\1\57"+
    "\2\15\1\60\1\15\1\61\1\62\1\63\1\15\1\64"+
    "\1\65\1\15\1\66\5\15\6\4\1\67\4\15\1\70"+
    "\2\15\1\71\1\72\1\73\1\15\1\74\1\0\6\15"+
    "\1\75\1\76\1\77\12\15\6\4\1\100\1\101\2\15"+
    "\13\0\1\15\1\102\1\103\1\0\1\104\1\15\1\0"+
    "\1\105\1\4\1\106\1\4\2\15\1\107\2\0\1\107"+
    "\12\0\1\110\1\111\15\0\1\112\1\0\1\113\26\0"+
    "\1\105\1\0\1\106\1\0\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\u0b7c\0\106\0\u01ea\0\u0bc2\0\u0c08\0\u01ea"+
    "\0\u01ea\0\u01ea\0\u01ea\0\214\0\u0c4e\0\u0c94\0\u0c4e\0\u0c4e"+
    "\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4"+
    "\0\u0f0a\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u0fdc\0\u0ec4\0\214\0\214\0\u10f4\0\214\0\u113a\0\u1180"+
    "\0\214\0\214\0\214\0\214\0\u11c6\0\214\0\214\0\214"+
    "\0\u120c\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\214"+
    "\0\u13f6\0\u143c\0\u1482\0\u14c8\0\214\0\u150e\0\214\0\214"+
    "\0\u1554\0\u159a\0\u15e0\0\214\0\214\0\214\0\214\0\u1626"+
    "\0\u166c\0\214\0\214\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\214\0\u1be4"+
    "\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14"+
    "\0\u1e5a\0\214\0\u1ea0\0\214\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8"+
    "\0\u1ffe\0\u2044\0\u0bc2\0\u208a\0\u0c08\0\u20d0\0\u2116\0\106"+
    "\0\u215c\0\u21a2\0\u21e8\0\u0d66\0\u0f96\0\u222e\0\u0c4e\0\u0ec4"+
    "\0\u2274\0\u22ba\0\214\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418"+
    "\0\u245e\0\214\0\u24a4\0\u24ea\0\214\0\u2530\0\u2576\0\214"+
    "\0\u25bc\0\214\0\214\0\214\0\u2602\0\214\0\214\0\u2648"+
    "\0\214\0\u268e\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832"+
    "\0\u2878\0\u28be\0\u2904\0\u294a\0\214\0\u2990\0\u29d6\0\u2a1c"+
    "\0\u2a62\0\214\0\u2aa8\0\u2aee\0\214\0\214\0\214\0\u0c4e"+
    "\0\u01ea\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\u2cd8"+
    "\0\214\0\214\0\214\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36"+
    "\0\u2e7c\0\u2ec2\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066"+
    "\0\u30ac\0\u30f2\0\u3138\0\214\0\214\0\u317e\0\u31c4\0\u320a"+
    "\0\u3250\0\u3296\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a"+
    "\0\u3480\0\u34c6\0\u350c\0\214\0\u3552\0\u3598\0\214\0\u35de"+
    "\0\u3624\0\u01ea\0\u366a\0\u01ea\0\u36b0\0\u36f6\0\u373c\0\u0c4e"+
    "\0\u3782\0\u37c8\0\106\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926"+
    "\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u01ea\0\214\0\u3aca"+
    "\0\u3b10\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa"+
    "\0\u3d40\0\u3d86\0\u3dcc\0\u3e12\0\u0c4e\0\u3e58\0\u0c4e\0\u3e9e"+
    "\0\u3ee4\0\u3f2a\0\u3f70\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce"+
    "\0\u4114\0\u415a\0\u41a0\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe"+
    "\0\u4344\0\u438a\0\u43d0\0\u4416\0\u445c\0\u0c4e\0\u44a2\0\u0c4e"+
    "\0\u44e8\0\u0c4e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\3\1\21\2\3\1\22\1\23\1\24\1\25\1\3"+
    "\1\11\1\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\3\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\3\1\45\1\46\1\47\1\50\2\3"+
    "\1\51\1\52\4\3\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\10\1\2\107\0\1\64"+
    "\1\65\1\64\3\66\2\67\21\64\1\67\13\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\1\0\1\73\1\10\1\74\5\10\1\74\21\10\1\75"+
    "\40\10\1\73\1\0\1\10\1\73\1\76\4\10\1\77"+
    "\1\73\1\0\1\100\1\101\1\100\3\5\1\102\1\67"+
    "\21\100\1\67\13\100\1\102\24\100\2\0\1\102\2\0"+
    "\4\102\1\103\2\0\1\100\1\104\1\105\1\106\1\107"+
    "\1\110\1\102\1\67\1\105\1\111\1\105\1\111\2\100"+
    "\1\105\2\100\1\105\4\100\2\105\1\100\1\67\5\100"+
    "\2\105\4\100\1\102\24\100\2\0\1\102\2\0\4\102"+
    "\1\103\2\0\1\100\1\101\1\100\1\5\2\7\1\102"+
    "\1\67\1\100\1\112\1\100\1\112\15\100\1\67\13\100"+
    "\1\102\24\100\2\0\1\102\2\0\4\102\1\103\1\0"+
    "\1\73\72\10\1\73\1\0\1\10\2\73\4\10\1\77"+
    "\1\73\1\0\1\67\1\11\5\67\1\11\21\67\1\11"+
    "\40\67\2\0\1\67\2\0\4\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\1\64\1\113\2\64\1\114"+
    "\3\64\1\115\3\64\1\116\1\64\1\117\2\64\1\67"+
    "\13\64\1\67\10\64\1\120\1\64\1\121\5\64\1\122"+
    "\1\64\1\123\1\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\21\64\1\67\13\64\1\67\4\64\1\124\1\64\1\125"+
    "\3\64\1\126\5\64\1\127\1\64\1\130\1\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\3\64\1\113\1\64\1\114"+
    "\5\64\1\131\5\64\1\67\3\64\1\116\1\64\1\132"+
    "\5\64\1\67\11\64\1\133\1\64\1\121\5\64\1\122"+
    "\1\64\1\123\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\5\64\1\124\1\64\1\134\3\64"+
    "\1\126\5\64\1\127\1\64\1\130\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\1\135\23\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\67\13\64"+
    "\1\67\1\64\1\136\22\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\7\64\1\137\4\64\1\140\4\64\1\67\2\64"+
    "\1\141\10\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\12\64\1\142\6\64\1\67\3\64\1\140\6\64"+
    "\1\143\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\10\64\1\144\3\64\1\145\1\146\3\64\1\67\13\64"+
    "\1\67\4\64\1\147\3\64\1\150\13\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\10\64"+
    "\1\151\13\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\1\152"+
    "\15\64\1\153\2\64\1\67\13\64\1\67\12\64\1\154"+
    "\5\64\1\155\1\64\1\156\1\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\14\64\1\157\4\64\1\67\13\64\1\67"+
    "\1\160\11\64\1\161\5\64\1\162\1\64\1\163\1\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\10\64\1\164\5\64"+
    "\1\165\2\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\1\166"+
    "\23\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\13\64\1\167"+
    "\5\64\1\67\3\64\1\145\1\170\6\64\1\67\5\64"+
    "\1\147\3\64\1\150\12\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\21\64\1\67\13\64\1\67\11\64\1\171\12\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\2\64\1\172\16\64"+
    "\1\67\5\64\1\173\5\64\1\67\13\64\1\154\5\64"+
    "\1\155\1\64\1\156\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\21\64\1\67\3\64\1\157\7\64\1\67\1\64\1\174"+
    "\11\64\1\175\5\64\1\162\1\64\1\163\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\13\64\1\176\5\64\1\67\5\64"+
    "\1\177\5\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\21\64\1\67\13\64\1\67\1\64\1\200\22\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\1\0"+
    "\1\73\10\10\1\201\1\10\1\202\11\10\1\203\2\10"+
    "\1\204\5\10\1\205\2\10\1\206\31\10\1\73\1\0"+
    "\1\10\2\73\4\10\1\77\1\73\1\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\2\64"+
    "\1\207\21\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\3\64\1\207\20\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\6\64\1\210\12\64\1\67\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\11\64"+
    "\1\211\7\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\2\64"+
    "\1\212\21\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\3\64\1\213\20\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\1\214\20\64\1\67\13\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\2\64\1\215"+
    "\16\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\6\64\1\216\12\64\1\67\13\64\1\67"+
    "\1\217\23\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\11\64"+
    "\1\220\7\64\1\67\13\64\1\67\1\64\1\221\22\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\14\64\1\222\1\64"+
    "\1\223\1\224\1\64\1\67\1\225\1\64\1\226\10\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\3\64\1\222\1\64\1\227\1\224\1\64\1\230"+
    "\1\64\1\231\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\1\0\74\53\1\0\11\53\1\0"+
    "\72\232\2\0\1\232\1\233\1\0\5\232\2\0\72\234"+
    "\2\0\1\234\1\0\1\235\5\234\2\0\72\67\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\1\236\1\67\1\236"+
    "\3\66\2\67\21\236\1\67\13\236\1\67\24\236\2\0"+
    "\1\70\2\0\4\67\1\72\2\0\3\67\3\237\64\67"+
    "\2\0\1\67\2\0\4\67\1\72\2\0\72\67\2\0"+
    "\1\67\2\240\4\67\1\72\1\0\74\73\1\0\12\73"+
    "\1\10\1\74\5\10\1\74\21\10\1\74\40\10\1\73"+
    "\1\0\1\10\2\73\4\10\1\77\2\73\1\10\1\74"+
    "\1\10\3\241\1\10\1\74\21\10\1\74\40\10\1\73"+
    "\1\0\1\10\2\73\4\10\1\77\3\73\1\242\71\73"+
    "\1\0\7\73\1\243\2\73\72\10\1\73\1\0\1\10"+
    "\2\244\4\10\1\77\1\73\1\0\1\100\1\67\1\100"+
    "\5\67\21\100\1\67\13\100\1\67\24\100\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\1\67\1\102\4\67\1\102"+
    "\36\67\1\102\24\67\2\0\1\102\2\0\4\102\1\103"+
    "\2\0\1\67\1\102\4\67\1\102\36\67\1\102\24\67"+
    "\2\0\1\102\2\240\4\102\1\103\2\0\1\67\1\245"+
    "\1\246\1\67\1\246\1\67\1\102\1\67\4\246\2\67"+
    "\1\246\2\67\1\246\4\67\2\246\7\67\2\246\4\67"+
    "\1\102\22\67\2\247\2\0\1\102\2\0\4\102\1\103"+
    "\2\0\1\100\1\246\1\105\1\67\1\246\3\67\4\105"+
    "\2\100\1\105\2\100\1\105\4\100\2\105\1\100\1\67"+
    "\5\100\2\105\4\100\1\67\22\100\2\250\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\1\100\1\101\1\100\3\106"+
    "\1\102\1\67\21\100\1\67\13\100\1\102\22\100\2\250"+
    "\2\0\1\102\2\0\4\102\1\103\2\0\1\100\1\104"+
    "\1\105\1\106\1\107\1\110\1\102\1\67\1\105\1\111"+
    "\1\105\1\111\2\100\1\105\2\100\1\105\4\100\2\105"+
    "\1\100\1\67\5\100\2\105\4\100\1\102\22\100\2\250"+
    "\2\0\1\102\2\0\4\102\1\103\2\0\1\100\1\101"+
    "\1\100\1\106\2\110\1\102\1\67\1\100\1\112\1\100"+
    "\1\112\15\100\1\67\13\100\1\102\22\100\2\250\2\0"+
    "\1\102\2\0\4\102\1\103\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\4\64\1\251"+
    "\17\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\15\64\1\252"+
    "\3\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\14\64\1\253"+
    "\7\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\15\64\1\254"+
    "\3\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\5\64\1\255"+
    "\16\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\67"+
    "\4\64\1\256\6\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\15\64\1\253"+
    "\6\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\67"+
    "\4\64\1\257\6\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\2\64\1\260"+
    "\21\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\67"+
    "\13\64\1\67\3\64\1\261\20\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\10\64\1\262\10\64\1\67\13\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\1\263\20\64"+
    "\1\67\13\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\13\64\1\262\5\64\1\67\13\64\1\67\24\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\2\64\1\264\16\64"+
    "\1\67\13\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\1\64\1\265\17\64\1\67\13\64\1\67\24\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\16\64\1\266\2\64"+
    "\1\67\13\64\1\67\1\267\7\64\1\270\13\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\15\64\1\271\3\64\1\67"+
    "\13\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\1\272\20\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\14\64\1\273\4\64\1\67\1\64"+
    "\1\274\11\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\1\275\20\64\1\67\13\64\1\67\24\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\21\64\1\67\13\64\1\67"+
    "\10\64\1\276\13\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\21\64\1\67\13\64\1\67\12\64\1\277\11\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\17\64\1\300\1\64\1\67"+
    "\13\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\15\64\1\301\3\64\1\67\13\64\1\67\24\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\3\64\1\265\15\64\1\67"+
    "\13\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\21\64\1\67\5\64\1\302\5\64\1\67\1\64\1\303"+
    "\7\64\1\270\12\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\21\64\1\67\4\64\1\304\6\64\1\67\24\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\2\64\1\272\16\64\1\67"+
    "\13\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\21\64\1\67\3\64\1\273\5\64\1\274\1\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\2\64\1\305"+
    "\16\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\11\64\1\276"+
    "\12\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\67"+
    "\13\64\1\67\13\64\1\277\10\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\6\64\1\306\4\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\67"+
    "\4\64\1\301\6\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\1\0\1\73\26\10\1\307"+
    "\43\10\1\73\1\0\1\10\2\73\4\10\1\77\2\73"+
    "\37\10\1\310\32\10\1\73\1\0\1\10\2\73\4\10"+
    "\1\77\2\73\25\10\1\311\44\10\1\73\1\0\1\10"+
    "\2\73\4\10\1\77\2\73\46\10\1\312\23\10\1\73"+
    "\1\0\1\10\2\73\4\10\1\77\2\73\36\10\1\313"+
    "\33\10\1\73\1\0\1\10\2\73\4\10\1\77\2\73"+
    "\47\10\1\314\22\10\1\73\1\0\1\10\2\73\4\10"+
    "\1\77\1\73\1\0\1\64\1\65\1\64\3\66\2\67"+
    "\15\64\1\315\3\64\1\67\13\64\1\67\24\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\21\64\1\67\4\64\1\315"+
    "\6\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\21\64\1\67\13\64\1\67\1\316\23\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\1\64"+
    "\1\317\22\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\10\64\1\320\13\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\11\64"+
    "\1\321\12\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\14\64"+
    "\1\322\4\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\1\323"+
    "\23\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\67"+
    "\3\64\1\322\7\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\1\64\1\324"+
    "\22\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\6\64\1\325"+
    "\12\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\6\64\1\326\12\64\1\67\13\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\16\64\1\327"+
    "\2\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\11\64\1\325\7\64\1\67\13\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\11\64\1\326"+
    "\7\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\5\64\1\327\5\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\72\232\2\0\1\232\1\240\1\0\5\232\2\0"+
    "\72\234\2\0\1\234\1\0\1\240\5\234\2\0\1\236"+
    "\1\67\4\236\2\67\21\236\1\67\13\236\1\67\24\236"+
    "\2\0\1\70\2\0\4\67\1\72\2\0\3\67\3\237"+
    "\64\67\2\0\1\67\2\0\3\67\1\330\1\72\1\0"+
    "\1\73\3\10\3\241\62\10\2\331\1\73\1\0\1\10"+
    "\2\73\4\10\1\77\75\73\1\0\2\73\1\76\102\73"+
    "\1\0\2\73\1\244\4\73\1\243\1\73\1\0\1\67"+
    "\2\246\1\67\1\246\3\67\4\246\2\67\1\246\2\67"+
    "\1\246\4\67\2\246\7\67\2\246\27\67\2\247\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\21\64\1\67\13\64\1\67\4\64\1\251"+
    "\17\64\2\0\1\70\2\0\1\332\1\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\16\64"+
    "\1\333\2\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\6\64\1\334\12\64\1\67\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\5\64\1\255\16\64\2\0\1\70"+
    "\2\0\1\332\1\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\21\64\1\67\5\64\1\335"+
    "\5\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\11\64\1\336\7\64\1\67\13\64\1\67\24\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\1\337\20\64\1\67\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\2\64"+
    "\1\340\16\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\14\64\1\341\4\64\1\67\1\64"+
    "\1\342\11\64\1\67\4\64\1\343\17\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\3\64\1\341\5\64"+
    "\1\342\1\64\1\67\5\64\1\343\16\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\17\64\1\344\1\64\1\67\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\14\64"+
    "\1\345\4\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\12\64"+
    "\1\346\11\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\6\64"+
    "\1\347\12\64\1\67\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\13\64\1\67\2\64"+
    "\1\350\21\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\6\64\1\351\4\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\67\3\64\1\352\7\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\13\64\1\353\10\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\11\64\1\354\7\64\1\67\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\3\64\1\355\20\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\1\0\1\73\25\10"+
    "\1\356\44\10\1\73\1\0\1\10\2\73\4\10\1\77"+
    "\2\73\36\10\1\357\33\10\1\73\1\0\1\10\2\73"+
    "\4\10\1\77\2\73\26\10\1\360\43\10\1\73\1\0"+
    "\1\10\2\73\4\10\1\77\2\73\10\10\1\361\61\10"+
    "\1\73\1\0\1\10\2\73\4\10\1\77\2\73\37\10"+
    "\1\362\32\10\1\73\1\0\1\10\2\73\4\10\1\77"+
    "\2\73\12\10\1\363\57\10\1\73\1\0\1\10\2\73"+
    "\4\10\1\77\1\73\1\0\1\64\1\65\1\64\3\66"+
    "\2\67\17\64\1\364\1\64\1\67\13\64\1\67\24\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\67\6\64"+
    "\1\364\4\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\21\64\1\67\13\64\1\67\14\64\1\365\7\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\67\13\64"+
    "\1\67\15\64\1\365\6\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\21\64\1\67\13\64\1\67\4\64\1\366\17\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\67\13\64"+
    "\1\67\5\64\1\367\16\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\3\67\3\370\64\67\2\0"+
    "\1\67\1\371\1\372\1\373\3\67\1\72\1\374\1\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\375\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\376\13\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\21\64\1\377\13\64\1\67\24\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\2\0\1\64\1\65"+
    "\1\64\3\66\2\67\21\64\1\u0100\13\64\1\67\24\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\u0101\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\u0102\13\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\20\64\1\u0103\1\67\13\64\1\67\24\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\1\64\1\u0104\17\64\1\67"+
    "\13\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\1\64\1\65\1\64\3\66\2\67"+
    "\6\64\1\u0105\12\64\1\67\13\64\1\67\24\64\2\0"+
    "\1\70\2\0\2\67\1\71\1\67\1\72\2\0\1\64"+
    "\1\65\1\64\3\66\2\67\21\64\1\u0106\13\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\67"+
    "\13\64\1\67\1\u0107\23\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\21\64\1\67\7\64\1\u0108\3\64\1\67\24\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\3\64\1\u0104\15\64"+
    "\1\67\13\64\1\67\24\64\2\0\1\70\2\0\2\67"+
    "\1\71\1\67\1\72\2\0\1\64\1\65\1\64\3\66"+
    "\2\67\11\64\1\u0105\7\64\1\67\13\64\1\67\24\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\u0109\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\1\64\1\65\1\64\3\66\2\67\21\64"+
    "\1\67\13\64\1\67\1\64\1\u0107\22\64\2\0\1\70"+
    "\2\0\2\67\1\71\1\67\1\72\1\0\1\73\26\10"+
    "\1\u010a\43\10\1\73\1\0\1\10\2\73\4\10\1\77"+
    "\2\73\37\10\1\u010a\32\10\1\73\1\0\1\10\2\73"+
    "\4\10\1\77\2\73\27\10\1\u010b\42\10\1\73\1\0"+
    "\1\10\2\73\4\10\1\77\2\73\16\10\1\u010c\53\10"+
    "\1\73\1\0\1\10\2\73\4\10\1\77\2\73\40\10"+
    "\1\u010d\31\10\1\73\1\0\1\10\2\73\4\10\1\77"+
    "\2\73\21\10\1\u010c\50\10\1\73\1\0\1\10\2\73"+
    "\4\10\1\77\1\73\1\0\1\64\1\65\1\64\3\66"+
    "\2\67\21\64\1\67\2\64\1\u010e\10\64\1\67\24\64"+
    "\2\0\1\70\2\0\2\67\1\71\1\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\67\12\64"+
    "\1\u010f\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\2\0\3\67\3\370\64\67\2\0\1\67"+
    "\2\0\1\67\1\u0110\2\67\1\72\2\0\6\u0111\1\0"+
    "\36\u0111\1\0\24\u0111\3\0\1\371\10\0\6\u0112\1\0"+
    "\36\u0112\1\0\24\u0112\4\0\1\372\7\0\3\67\3\370"+
    "\64\67\2\0\1\67\1\371\1\372\1\373\3\67\1\72"+
    "\102\0\1\u0113\5\0\24\67\1\u0114\45\67\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\52\67\1\u0115\17\67\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\35\67\1\u0116\34\67"+
    "\2\0\1\67\2\0\4\67\1\72\2\0\53\67\1\u0117"+
    "\16\67\2\0\1\67\2\0\4\67\1\72\2\0\52\67"+
    "\1\u0118\17\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\53\67\1\u0119\16\67\2\0\1\67\2\0\4\67\1\72"+
    "\2\0\1\64\1\65\1\64\3\66\2\67\21\64\1\u011a"+
    "\13\64\1\67\24\64\2\0\1\70\2\0\2\67\1\71"+
    "\1\67\1\72\1\0\74\u0105\1\0\11\u0105\1\0\24\67"+
    "\1\u011b\45\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\1\64\1\65\1\64\3\66\2\67\21\64\1\u011c\13\64"+
    "\1\67\24\64\2\0\1\70\2\0\2\67\1\71\1\67"+
    "\1\72\2\0\35\67\1\u011d\34\67\2\0\1\67\2\0"+
    "\4\67\1\72\1\0\1\73\30\10\1\u011e\41\10\1\73"+
    "\1\0\1\10\2\73\4\10\1\77\2\73\41\10\1\u011e"+
    "\30\10\1\73\1\0\1\10\2\73\4\10\1\77\1\73"+
    "\1\0\1\64\1\65\1\64\3\66\2\67\6\64\1\u011f"+
    "\12\64\1\67\13\64\1\67\24\64\2\0\1\70\2\0"+
    "\2\67\1\71\1\67\1\72\2\0\1\64\1\65\1\64"+
    "\3\66\2\67\11\64\1\u011f\7\64\1\67\13\64\1\67"+
    "\24\64\2\0\1\70\2\0\2\67\1\71\1\67\1\72"+
    "\2\0\6\u0111\1\0\36\u0111\1\0\24\u0111\11\0\1\u0120"+
    "\2\0\6\u0112\1\0\36\u0112\1\0\24\u0112\11\0\1\u0121"+
    "\2\0\16\67\1\u0122\53\67\2\0\1\67\2\0\4\67"+
    "\1\72\2\0\25\67\1\u0123\44\67\2\0\1\67\2\0"+
    "\4\67\1\72\2\0\21\67\1\u0124\50\67\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\36\67\1\u0125\33\67\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\25\67\1\u0126\44\67"+
    "\2\0\1\67\2\0\4\67\1\72\2\0\36\67\1\u0127"+
    "\33\67\2\0\1\67\2\0\4\67\1\72\2\0\24\67"+
    "\1\u0128\45\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\16\67\1\u0129\53\67\2\0\1\67\2\0\4\67\1\72"+
    "\2\0\35\67\1\u012a\34\67\2\0\1\67\2\0\4\67"+
    "\1\72\2\0\21\67\1\u012b\50\67\2\0\1\67\2\0"+
    "\4\67\1\72\77\0\1\374\106\0\1\374\7\0\32\67"+
    "\1\u012c\37\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\50\67\1\u012d\21\67\2\0\1\67\2\0\4\67\1\72"+
    "\2\0\42\67\1\u012e\27\67\2\0\1\67\2\0\4\67"+
    "\1\72\2\0\51\67\1\u012d\20\67\2\0\1\67\2\0"+
    "\4\67\1\72\2\0\50\67\1\u012f\21\67\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\51\67\1\u012f\20\67\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\16\67\1\u0130\53\67"+
    "\2\0\1\67\2\0\4\67\1\72\2\0\32\67\1\u0131"+
    "\37\67\2\0\1\67\2\0\4\67\1\72\2\0\21\67"+
    "\1\u0132\50\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\42\67\1\u0133\27\67\2\0\1\67\2\0\4\67\1\72"+
    "\2\0\33\67\1\u0134\36\67\2\0\1\67\2\0\4\67"+
    "\1\72\2\0\43\67\1\u0135\26\67\2\0\1\67\2\0"+
    "\4\67\1\72\2\0\32\67\1\u0136\37\67\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\33\67\1\u0137\36\67\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\42\67\1\u0138\27\67"+
    "\2\0\1\67\2\0\4\67\1\72\2\0\43\67\1\u0139"+
    "\26\67\2\0\1\67\2\0\4\67\1\72\2\0\16\67"+
    "\1\u013a\53\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\21\67\1\u013b\50\67\2\0\1\67\2\0\4\67\1\72"+
    "\2\0\33\67\1\u013c\36\67\2\0\1\67\2\0\4\67"+
    "\1\72\2\0\16\67\1\u013d\53\67\2\0\1\67\2\0"+
    "\4\67\1\72\2\0\43\67\1\u013e\26\67\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\21\67\1\u013f\50\67\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\34\67\1\u0140\35\67"+
    "\2\0\1\67\2\0\4\67\1\72\2\0\44\67\1\u0141"+
    "\25\67\2\0\1\67\2\0\4\67\1\72\2\0\16\67"+
    "\1\u0142\53\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\34\67\1\u0143\35\67\2\0\1\67\2\0\4\67\1\72"+
    "\2\0\21\67\1\u0144\50\67\2\0\1\67\2\0\4\67"+
    "\1\72\2\0\44\67\1\u0145\25\67\2\0\1\67\2\0"+
    "\4\67\1\72\2\0\25\67\1\u0146\44\67\2\0\1\67"+
    "\2\0\4\67\1\72\2\0\36\67\1\u0146\33\67\2\0"+
    "\1\67\2\0\4\67\1\72\2\0\34\67\1\u0147\35\67"+
    "\2\0\1\67\2\0\4\67\1\72\2\0\25\67\1\u0148"+
    "\44\67\2\0\1\67\2\0\4\67\1\72\2\0\44\67"+
    "\1\u0149\25\67\2\0\1\67\2\0\4\67\1\72\2\0"+
    "\36\67\1\u0148\33\67\2\0\1\67\2\0\4\67\1\72"+
    "\2\0\25\67\1\u014a\44\67\2\0\1\67\2\0\4\67"+
    "\1\72\2\0\36\67\1\u014a\33\67\2\0\1\67\2\0"+
    "\4\67\1\72\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17710];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\51\1\1\11\12\1\1\0\1\1\2\0"+
    "\137\1\6\0\1\11\5\1\1\0\63\1\1\0\35\1"+
    "\13\0\3\1\1\0\2\1\1\0\7\1\2\0\1\11"+
    "\12\0\2\1\15\0\1\1\1\0\1\1\26\0\1\1"+
    "\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String maeLexMe;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MAELEX(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MAELEX(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Elementos yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { maeLexMe=yytext(); return DUP;
          }
        case 76: break;
        case 19: 
          { maeLexMe=yytext(); return DW;
          }
        case 77: break;
        case 51: 
          { maeLexMe=yytext(); return AAM;
          }
        case 78: break;
        case 10: 
          { maeLexMe=yytext(); return Parentesis_c;
          }
        case 79: break;
        case 42: 
          { maeLexMe=yytext(); return JC;
          }
        case 80: break;
        case 50: 
          { maeLexMe=yytext(); return AAS;
          }
        case 81: break;
        case 4: 
          { maeLexMe=yytext(); return Separadores;
          }
        case 82: break;
        case 16: 
          { maeLexMe=yytext(); maeLexMe=maeLexMe.replace(",", ""); return ConstanteDec;
          }
        case 83: break;
        case 73: 
          { maeLexMe=yytext(); return LOOPNE;
          }
        case 84: break;
        case 72: 
          { maeLexMe=yytext(); return STACK;
          }
        case 85: break;
        case 2: 
          { /*Ignorar*/
          }
        case 86: break;
        case 75: 
          { maeLexMe=yytext(); return WORD_PTR;
          }
        case 87: break;
        case 30: 
          { maeLexMe=yytext(); return SS;
          }
        case 88: break;
        case 62: 
          { maeLexMe=yytext(); return ENDM;
          }
        case 89: break;
        case 7: 
          { maeLexMe=yytext(); return Comilla_d;
          }
        case 90: break;
        case 25: 
          { maeLexMe=yytext(); return BP;
          }
        case 91: break;
        case 61: 
          { maeLexMe=yytext(); return ENDS;
          }
        case 92: break;
        case 55: 
          { maeLexMe=yytext(); return RET;
          }
        case 93: break;
        case 56: 
          { maeLexMe=yytext(); return LES;
          }
        case 94: break;
        case 21: 
          { maeLexMe=yytext(); return DI;
          }
        case 95: break;
        case 12: 
          { maeLexMe=yytext(); return Corchete_c;
          }
        case 96: break;
        case 46: 
          { maeLexMe=yytext(); return EQU;
          }
        case 97: break;
        case 1: 
          { return ERROR;
          }
        case 98: break;
        case 9: 
          { maeLexMe=yytext(); return Parentesis_a;
          }
        case 99: break;
        case 60: 
          { maeLexMe=yytext(); maeLexMe=maeLexMe.replace(", ", ""); return ERROR;
          }
        case 100: break;
        case 58: 
          { maeLexMe=yytext(); return JGE;
          }
        case 101: break;
        case 52: 
          { maeLexMe=yytext(); return CLI;
          }
        case 102: break;
        case 45: 
          { maeLexMe=yytext(); return DIV;
          }
        case 103: break;
        case 49: 
          { maeLexMe=yytext(); return ADD;
          }
        case 104: break;
        case 18: 
          { maeLexMe=yytext(); return DB;
          }
        case 105: break;
        case 24: 
          { maeLexMe=yytext(); return DH;
          }
        case 106: break;
        case 41: 
          { maeLexMe=yytext(); return JS;
          }
        case 107: break;
        case 40: 
          { maeLexMe=yytext(); return OR;
          }
        case 108: break;
        case 39: 
          { maeLexMe=yytext(); return CH;
          }
        case 109: break;
        case 66: 
          { maeLexMe=yytext(); return STOSB;
          }
        case 110: break;
        case 69: 
          { maeLexMe=yytext(); return DATA;
          }
        case 111: break;
        case 64: 
          { maeLexMe=yytext(); return PROC;
          }
        case 112: break;
        case 28: 
          { maeLexMe=yytext(); return BH;
          }
        case 113: break;
        case 43: 
          { maeLexMe=yytext(); return Cadena;
          }
        case 114: break;
        case 15: 
          { maeLexMe=yytext();  maeLexMe=maeLexMe.replace(":", ""); return Etiqueta;
          }
        case 115: break;
        case 35: 
          { maeLexMe=yytext(); return AH;
          }
        case 116: break;
        case 65: 
          { maeLexMe=yytext(); return IDIV;
          }
        case 117: break;
        case 48: 
          { maeLexMe=yytext(); return STI;
          }
        case 118: break;
        case 44: 
          { maeLexMe=yytext(); return maeLexMe.length()==4 || maeLexMe.length()==6 ? ConstanteHex : ERROR;
          }
        case 119: break;
        case 57: 
          { maeLexMe=yytext(); return JAE;
          }
        case 120: break;
        case 67: 
          { maeLexMe=yytext(); return TITLE;
          }
        case 121: break;
        case 17: 
          { maeLexMe=yytext(); return maeLexMe.length()==9 || maeLexMe.length()==17 ? ConstanteBin : ERROR;
          }
        case 122: break;
        case 29: 
          { maeLexMe=yytext(); return ES;
          }
        case 123: break;
        case 11: 
          { maeLexMe=yytext(); return Corchete_a;
          }
        case 124: break;
        case 20: 
          { maeLexMe=yytext(); return DS;
          }
        case 125: break;
        case 47: 
          { maeLexMe=yytext(); return SUB;
          }
        case 126: break;
        case 3: 
          { maeLexMe=yytext(); return ConstanteDec;
          }
        case 127: break;
        case 31: 
          { maeLexMe=yytext(); return SP;
          }
        case 128: break;
        case 36: 
          { maeLexMe=yytext(); return CS;
          }
        case 129: break;
        case 63: 
          { maeLexMe=yytext(); return ENDP;
          }
        case 130: break;
        case 5: 
          { return Linea;
          }
        case 131: break;
        case 68: 
          { maeLexMe=yytext(); return MACRO;
          }
        case 132: break;
        case 6: 
          { maeLexMe=yytext(); return Dos_puntos;
          }
        case 133: break;
        case 74: 
          { maeLexMe=yytext(); return BYTE_PTR;
          }
        case 134: break;
        case 8: 
          { maeLexMe=yytext(); return Comilla_s;
          }
        case 135: break;
        case 22: 
          { maeLexMe=yytext(); return DL;
          }
        case 136: break;
        case 54: 
          { maeLexMe=yytext(); return NOT;
          }
        case 137: break;
        case 32: 
          { maeLexMe=yytext(); return SI;
          }
        case 138: break;
        case 59: 
          { maeLexMe=yytext(); return JNA;
          }
        case 139: break;
        case 13: 
          { maeLexMe=yytext(); return Simbolo;
          }
        case 140: break;
        case 37: 
          { maeLexMe=yytext(); return CL;
          }
        case 141: break;
        case 23: 
          { maeLexMe=yytext(); return DX;
          }
        case 142: break;
        case 14: 
          { maeLexMe=yytext(); maeLexMe=maeLexMe.replace(",", ""); return SinComa;
          }
        case 143: break;
        case 26: 
          { maeLexMe=yytext(); return BL;
          }
        case 144: break;
        case 38: 
          { maeLexMe=yytext(); return CX;
          }
        case 145: break;
        case 33: 
          { maeLexMe=yytext(); return AL;
          }
        case 146: break;
        case 53: 
          { maeLexMe=yytext(); return MUL;
          }
        case 147: break;
        case 70: 
          { maeLexMe=yytext(); return CODE;
          }
        case 148: break;
        case 27: 
          { maeLexMe=yytext(); return BX;
          }
        case 149: break;
        case 34: 
          { maeLexMe=yytext(); return AX;
          }
        case 150: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
