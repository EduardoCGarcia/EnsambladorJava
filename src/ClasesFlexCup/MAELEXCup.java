/* The following code was generated by JFlex 1.4.3 on 17/10/21 22:09 */

package Controladores;
import ClasesFlexCup.symb;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 17/10/21 22:09 from the specification file
 * <tt>D:/Ensamblador/ProyectoEnsamblador/src/ArchivosFlexCup/MAELEXCup.flex</tt>
 */
class MAELEXCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  8, 60,  0,  0,  8,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    26,  0, 61,  0, 68,  0,  0, 63, 64, 65,  7,  0,  2,  0, 38,  0, 
     5,  6,  4,  4,  4,  4,  4,  4,  4,  4, 62, 59,  0,  0,  0, 69, 
     0, 32, 12, 33, 11, 18,  3, 35, 58, 48, 54, 34, 50, 36, 37, 40, 
    44, 19, 42, 30, 31, 20, 52, 14, 56, 46,  1, 66,  0, 67,  0,  3, 
     0, 23, 10, 24,  9, 15,  3, 27, 57, 47, 53, 25, 49, 28, 29, 39, 
    43, 16, 41, 21, 22, 17, 51, 13, 55, 45,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\3\4\1\5\1\3\24\2"+
    "\1\5\14\2\1\3\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\2\1\0\1\15\2\0\1\5\2\3"+
    "\1\16\3\5\1\4\2\5\1\4\1\5\3\4\2\17"+
    "\1\20\1\21\1\2\1\22\1\2\1\23\1\24\1\25"+
    "\1\26\1\27\1\2\1\30\1\31\1\32\2\2\1\23"+
    "\4\2\1\33\4\2\1\34\1\2\1\35\1\36\3\2"+
    "\1\37\1\40\1\41\1\42\1\2\1\43\1\44\1\45"+
    "\11\2\1\43\3\2\6\5\1\46\12\2\1\47\1\2"+
    "\1\50\5\2\5\0\1\51\3\5\1\51\1\5\1\0"+
    "\2\52\2\2\1\53\6\2\1\54\2\2\1\55\2\2"+
    "\1\56\1\2\1\57\1\60\1\61\1\2\1\62\1\63"+
    "\1\2\1\64\5\2\6\5\1\65\4\2\1\66\2\2"+
    "\1\67\1\70\1\71\1\2\1\1\1\0\6\2\1\72"+
    "\1\73\1\74\12\2\6\5\1\75\1\76\2\2\13\0"+
    "\1\2\1\77\1\100\1\0\1\101\1\2\1\0\1\102"+
    "\1\5\1\103\1\5\2\2\1\104\11\0\1\100\3\0"+
    "\1\105\1\106\15\0\1\107\1\0\1\110\26\0\1\102"+
    "\1\0\1\103\1\0\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a"+
    "\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a"+
    "\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a"+
    "\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8\0\u0a1e\0\u0a64\0\u0aaa"+
    "\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u01ea\0\u0c08\0\106\0\106"+
    "\0\106\0\u0c4e\0\u0c94\0\u0c4e\0\u0c4e\0\u0cda\0\u0d20\0\u0d66"+
    "\0\u0dac\0\u0df2\0\u0d66\0\u0e38\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f0a"+
    "\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae\0\u0fdc\0\u0ec4"+
    "\0\214\0\214\0\u10f4\0\214\0\u113a\0\u1180\0\214\0\214"+
    "\0\214\0\214\0\u11c6\0\214\0\214\0\214\0\u120c\0\u1252"+
    "\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\214\0\u13f6\0\u143c"+
    "\0\u1482\0\u14c8\0\214\0\u150e\0\214\0\214\0\u1554\0\u159a"+
    "\0\u15e0\0\214\0\214\0\214\0\214\0\u1626\0\u166c\0\214"+
    "\0\214\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856"+
    "\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\u1a40\0\u1a86"+
    "\0\u1acc\0\u1b12\0\u1b58\0\u1b9e\0\214\0\u1be4\0\u1c2a\0\u1c70"+
    "\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\214"+
    "\0\u1ea0\0\214\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u0bc2\0\u208a\0\u0c08\0\u20d0\0\106\0\u2116\0\u215c\0\u21a2"+
    "\0\u0d66\0\u0f96\0\u21e8\0\u0c4e\0\u0ec4\0\u222e\0\u2274\0\214"+
    "\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\214\0\u245e"+
    "\0\u24a4\0\214\0\u24ea\0\u2530\0\214\0\u2576\0\214\0\214"+
    "\0\214\0\u25bc\0\214\0\214\0\u2602\0\214\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\214\0\u294a\0\u2990\0\u29d6\0\u2a1c\0\214\0\u2a62"+
    "\0\u2aa8\0\214\0\214\0\214\0\106\0\u01ea\0\u2aee\0\u2b34"+
    "\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92\0\214\0\214\0\214"+
    "\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\214\0\214\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296"+
    "\0\u32dc\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6"+
    "\0\214\0\u350c\0\u3552\0\214\0\u3598\0\u35de\0\u01ea\0\u3624"+
    "\0\u01ea\0\u366a\0\u36b0\0\u36f6\0\106\0\u373c\0\u3782\0\u37c8"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u01ea\0\214\0\u3aca\0\u3b10\0\u3b56\0\u3b9c"+
    "\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86\0\u3dcc"+
    "\0\u3e12\0\u0c4e\0\u3e58\0\u0c4e\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\u43d0"+
    "\0\u4416\0\u445c\0\u0c4e\0\u44a2\0\u0c4e\0\u44e8\0\u0c4e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\2\3\1\21\2\3\1\22\1\23\1\24\1\25\1\3"+
    "\1\11\1\3\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\2\3\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\2\3\1\45\1\46\1\47\1\50\2\3"+
    "\1\51\1\52\4\3\1\53\1\11\1\54\1\55\1\56"+
    "\2\57\1\60\1\61\1\10\1\2\107\0\1\3\1\62"+
    "\1\3\3\63\2\64\21\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\1\0\1\70\1\10\1\71\5\10\1\71\21\10\1\72"+
    "\40\10\1\70\1\11\1\73\1\10\1\74\4\70\1\75"+
    "\1\70\1\0\1\76\1\77\1\76\3\5\1\100\1\64"+
    "\21\76\1\64\13\76\1\100\24\76\1\0\1\64\1\0"+
    "\1\100\5\0\1\101\2\0\1\76\1\102\1\103\1\104"+
    "\1\105\1\106\1\100\1\64\1\103\1\107\1\103\1\107"+
    "\2\76\1\103\2\76\1\103\4\76\2\103\1\76\1\64"+
    "\5\76\2\103\4\76\1\100\24\76\1\0\1\64\1\0"+
    "\1\100\5\0\1\101\2\0\1\76\1\77\1\76\1\5"+
    "\2\7\1\100\1\64\1\76\1\110\1\76\1\110\15\76"+
    "\1\64\13\76\1\100\24\76\1\0\1\64\1\0\1\100"+
    "\5\0\1\101\1\0\1\70\72\10\1\70\1\64\1\70"+
    "\1\10\5\70\1\75\1\70\1\0\1\64\1\11\5\64"+
    "\1\11\21\64\1\11\40\64\1\0\1\11\1\0\1\64"+
    "\5\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\1\3\1\111\2\3\1\112\3\3\1\113\3\3\1\114"+
    "\1\3\1\115\2\3\1\64\13\3\1\64\10\3\1\116"+
    "\1\3\1\117\5\3\1\120\1\3\1\121\1\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\13\3"+
    "\1\64\4\3\1\122\1\3\1\123\3\3\1\124\5\3"+
    "\1\125\1\3\1\126\1\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\3\3\1\111\1\3\1\112\5\3\1\127"+
    "\5\3\1\64\3\3\1\114\1\3\1\130\5\3\1\64"+
    "\11\3\1\131\1\3\1\117\5\3\1\120\1\3\1\121"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\21\3\1\64"+
    "\13\3\1\64\5\3\1\122\1\3\1\132\3\3\1\124"+
    "\5\3\1\125\1\3\1\126\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\13\3\1\64\1\133\23\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\21\3\1\64"+
    "\13\3\1\64\1\3\1\134\22\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\2\0\1\3\1\62"+
    "\1\3\3\63\2\64\7\3\1\135\4\3\1\136\4\3"+
    "\1\64\2\3\1\137\10\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\12\3\1\140\6\3\1\64"+
    "\3\3\1\136\6\3\1\141\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\10\3\1\142\3\3\1\143"+
    "\1\144\3\3\1\64\13\3\1\64\4\3\1\145\3\3"+
    "\1\146\13\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\13\3\1\64\10\3\1\147\13\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\1\150\15\3\1\151"+
    "\2\3\1\64\13\3\1\64\12\3\1\152\5\3\1\153"+
    "\1\3\1\154\1\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\14\3\1\155\4\3\1\64\13\3\1\64\1\156"+
    "\11\3\1\157\5\3\1\160\1\3\1\161\1\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\10\3\1\162\5\3"+
    "\1\163\2\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\13\3\1\64"+
    "\1\164\23\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\13\3\1\165\5\3\1\64\3\3\1\143\1\166\6\3"+
    "\1\64\5\3\1\145\3\3\1\146\12\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\13\3\1\64"+
    "\11\3\1\167\12\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\2\3\1\170\16\3\1\64\5\3\1\171\5\3"+
    "\1\64\13\3\1\152\5\3\1\153\1\3\1\154\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\3\3"+
    "\1\155\7\3\1\64\1\3\1\172\11\3\1\173\5\3"+
    "\1\160\1\3\1\161\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\13\3\1\174\5\3\1\64\5\3\1\175\5\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\13\3\1\64\1\3\1\176\22\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\1\0"+
    "\1\70\10\10\1\177\1\10\1\200\11\10\1\201\2\10"+
    "\1\202\5\10\1\203\2\10\1\204\31\10\1\70\1\64"+
    "\1\70\1\10\5\70\1\75\1\70\1\0\1\3\1\62"+
    "\1\3\3\63\2\64\21\3\1\64\13\3\1\64\2\3"+
    "\1\205\21\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\13\3\1\64\3\3\1\205\20\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\6\3\1\206\12\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\11\3\1\207\7\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\13\3\1\64\2\3\1\210\21\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\13\3\1\64"+
    "\3\3\1\211\20\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\1\212\20\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\2\3\1\213\16\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\6\3\1\214\12\3\1\64\13\3\1\64"+
    "\1\215\23\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\11\3\1\216\7\3\1\64\13\3\1\64\1\3\1\217"+
    "\22\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\14\3"+
    "\1\220\1\3\1\221\1\222\1\3\1\64\1\223\1\3"+
    "\1\224\10\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\3\3\1\220\1\3\1\225"+
    "\1\222\1\3\1\226\1\3\1\227\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\1\0"+
    "\74\53\1\0\11\53\1\0\72\230\1\0\1\230\1\231"+
    "\1\230\5\0\1\230\2\0\72\232\1\0\1\232\1\0"+
    "\1\232\1\233\4\0\1\232\2\0\72\64\1\0\1\64"+
    "\1\0\1\64\5\0\1\67\2\0\1\63\1\64\4\63"+
    "\2\64\21\63\1\64\13\63\1\64\24\63\1\0\1\64"+
    "\1\0\1\65\5\0\1\67\5\0\3\234\100\0\72\64"+
    "\1\0\1\64\1\235\1\64\1\235\4\0\1\67\1\0"+
    "\74\70\1\0\12\70\1\10\1\71\5\10\1\71\21\10"+
    "\1\71\40\10\1\70\1\11\1\70\1\10\5\70\1\75"+
    "\2\70\1\10\1\71\1\10\3\236\1\10\1\71\21\10"+
    "\1\71\40\10\1\70\1\11\1\70\1\10\5\70\1\75"+
    "\3\70\1\237\71\70\1\0\7\70\1\240\2\70\72\10"+
    "\1\70\1\64\1\241\1\10\1\241\4\70\1\75\1\70"+
    "\1\0\1\76\1\64\1\76\5\64\21\76\1\64\13\76"+
    "\1\64\24\76\1\0\1\64\1\0\1\64\5\0\1\67"+
    "\2\0\1\64\1\100\4\64\1\100\36\64\1\100\24\64"+
    "\1\0\1\64\1\0\1\100\5\0\1\101\2\0\1\64"+
    "\1\100\4\64\1\100\36\64\1\100\24\64\1\0\1\64"+
    "\1\235\1\100\1\235\4\0\1\101\2\0\1\64\1\242"+
    "\1\243\1\64\1\243\1\64\1\100\1\64\4\243\2\64"+
    "\1\243\2\64\1\243\4\64\2\243\7\64\2\243\4\64"+
    "\1\100\22\64\2\244\1\0\1\64\1\0\1\100\5\0"+
    "\1\101\2\0\1\76\1\243\1\103\1\64\1\243\3\64"+
    "\4\103\2\76\1\103\2\76\1\103\4\76\2\103\1\76"+
    "\1\64\5\76\2\103\4\76\1\64\22\76\2\245\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\1\76\1\77"+
    "\1\76\3\104\1\100\1\64\21\76\1\64\13\76\1\100"+
    "\22\76\2\245\1\0\1\64\1\0\1\100\5\0\1\101"+
    "\2\0\1\76\1\102\1\103\1\104\1\105\1\106\1\100"+
    "\1\64\1\103\1\107\1\103\1\107\2\76\1\103\2\76"+
    "\1\103\4\76\2\103\1\76\1\64\5\76\2\103\4\76"+
    "\1\100\22\76\2\245\1\0\1\64\1\0\1\100\5\0"+
    "\1\101\2\0\1\76\1\77\1\76\1\104\2\106\1\100"+
    "\1\64\1\76\1\110\1\76\1\110\15\76\1\64\13\76"+
    "\1\100\22\76\2\245\1\0\1\64\1\0\1\100\5\0"+
    "\1\101\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\13\3\1\64\4\3\1\246\17\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\15\3\1\247\3\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\21\3\1\64\13\3\1\64\14\3\1\250\7\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\15\3\1\251"+
    "\3\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\2\0\1\3\1\62"+
    "\1\3\3\63\2\64\21\3\1\64\13\3\1\64\5\3"+
    "\1\252\16\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\4\3\1\253\6\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\13\3"+
    "\1\64\15\3\1\250\6\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\4\3\1\254\6\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\13\3\1\64\2\3\1\255\21\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\13\3\1\64"+
    "\3\3\1\256\20\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\10\3\1\257\10\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\1\260\20\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\13\3\1\257\5\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\2\3"+
    "\1\261\16\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\1\3\1\262\17\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\16\3\1\263\2\3\1\64\13\3\1\64\1\264"+
    "\7\3\1\265\13\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\15\3\1\266\3\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\1\267\20\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\14\3\1\270\4\3\1\64\1\3\1\271"+
    "\11\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\1\272\20\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\13\3"+
    "\1\64\10\3\1\273\13\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\13\3\1\64\12\3\1\274"+
    "\11\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\17\3"+
    "\1\275\1\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\15\3\1\276\3\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\3\3\1\262\15\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\21\3\1\64"+
    "\5\3\1\277\5\3\1\64\1\3\1\300\7\3\1\265"+
    "\12\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\4\3\1\301\6\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\2\3\1\267\16\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\21\3\1\64\3\3\1\270\5\3\1\271\1\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\2\3\1\302\16\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\13\3"+
    "\1\64\11\3\1\273\12\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\13\3\1\64\13\3\1\274"+
    "\10\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\6\3\1\303\4\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\4\3\1\276"+
    "\6\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\1\0\1\70\26\10\1\304\43\10"+
    "\1\70\1\64\1\70\1\10\5\70\1\75\2\70\37\10"+
    "\1\305\32\10\1\70\1\64\1\70\1\10\5\70\1\75"+
    "\2\70\25\10\1\306\44\10\1\70\1\64\1\70\1\10"+
    "\5\70\1\75\2\70\46\10\1\307\23\10\1\70\1\64"+
    "\1\70\1\10\5\70\1\75\2\70\36\10\1\310\33\10"+
    "\1\70\1\64\1\70\1\10\5\70\1\75\2\70\47\10"+
    "\1\311\22\10\1\70\1\64\1\70\1\10\5\70\1\75"+
    "\1\70\1\0\1\3\1\62\1\3\3\63\2\64\15\3"+
    "\1\312\3\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\4\3\1\312"+
    "\6\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\21\3\1\64\13\3\1\64\1\313\23\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\13\3"+
    "\1\64\1\3\1\314\22\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\13\3\1\64\10\3\1\315"+
    "\13\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\13\3\1\64\11\3\1\316\12\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\14\3\1\317\4\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\21\3\1\64\13\3\1\64\1\320\23\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\3\3"+
    "\1\317\7\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\13\3\1\64\1\3\1\321"+
    "\22\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\6\3"+
    "\1\322\12\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\6\3\1\323\12\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\16\3\1\324\2\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\11\3\1\322"+
    "\7\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\2\0\1\3\1\62"+
    "\1\3\3\63\2\64\11\3\1\323\7\3\1\64\13\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\5\3\1\324\5\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\72\230\1\0\1\230\1\235\1\230\5\0\1\230\2\0"+
    "\72\232\1\0\1\232\1\0\1\232\1\235\4\0\1\232"+
    "\5\0\3\234\74\0\1\325\2\0\1\70\3\10\3\236"+
    "\62\10\2\326\1\70\1\64\1\70\1\10\5\70\1\75"+
    "\75\70\1\0\2\70\1\74\102\70\1\0\2\70\1\241"+
    "\4\70\1\240\1\70\1\0\1\64\2\243\1\64\1\243"+
    "\3\64\4\243\2\64\1\243\2\64\1\243\4\64\2\243"+
    "\7\64\2\243\27\64\2\244\1\0\1\64\1\0\1\64"+
    "\5\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\13\3\1\64\4\3\1\246\17\3\1\0"+
    "\1\64\1\0\1\65\1\0\1\327\1\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\16\3"+
    "\1\330\2\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\6\3\1\331\12\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\21\3\1\64\13\3\1\64\5\3\1\252\16\3"+
    "\1\0\1\64\1\0\1\65\1\0\1\327\1\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\5\3\1\332\5\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\11\3\1\333\7\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\1\334\20\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\2\3\1\335"+
    "\16\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\2\0\1\3\1\62"+
    "\1\3\3\63\2\64\14\3\1\336\4\3\1\64\1\3"+
    "\1\337\11\3\1\64\4\3\1\340\17\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\3\3\1\336"+
    "\5\3\1\337\1\3\1\64\5\3\1\340\16\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\17\3\1\341\1\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\14\3\1\342\4\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\13\3\1\64\12\3\1\343\11\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\6\3\1\344\12\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\21\3\1\64\13\3\1\64\2\3\1\345\21\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\21\3\1\64"+
    "\6\3\1\346\4\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\2\0\1\3\1\62"+
    "\1\3\3\63\2\64\21\3\1\64\3\3\1\347\7\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\13\3\1\64\13\3\1\350\10\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\11\3\1\351\7\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\13\3\1\64\3\3\1\352"+
    "\20\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\1\0\1\70\25\10\1\353\44\10\1\70\1\64"+
    "\1\70\1\10\5\70\1\75\2\70\36\10\1\354\33\10"+
    "\1\70\1\64\1\70\1\10\5\70\1\75\2\70\26\10"+
    "\1\355\43\10\1\70\1\64\1\70\1\10\5\70\1\75"+
    "\2\70\10\10\1\356\61\10\1\70\1\64\1\70\1\10"+
    "\5\70\1\75\2\70\37\10\1\357\32\10\1\70\1\64"+
    "\1\70\1\10\5\70\1\75\2\70\12\10\1\360\57\10"+
    "\1\70\1\64\1\70\1\10\5\70\1\75\1\70\1\0"+
    "\1\3\1\62\1\3\3\63\2\64\17\3\1\361\1\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\64\6\3\1\361\4\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\13\3\1\64\14\3\1\362\7\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\64\13\3\1\64"+
    "\15\3\1\362\6\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\1\3\1\62\1\3\3\63"+
    "\2\64\21\3\1\64\13\3\1\64\4\3\1\363\17\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\21\3\1\64"+
    "\13\3\1\64\5\3\1\364\16\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\5\0\3\365\66\0"+
    "\1\366\1\0\1\367\1\370\4\0\1\371\1\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\372\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\373\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\374\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\375\13\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\376\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\2\0\1\3\1\62"+
    "\1\3\3\63\2\64\21\3\1\377\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\65\3\0\1\66\1\0\1\67"+
    "\2\0\1\3\1\62\1\3\3\63\2\64\20\3\1\u0100"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\1\3\1\u0101\17\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\6\3"+
    "\1\u0102\12\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\u0103\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\1\3\1\62\1\3\3\63\2\64\21\3"+
    "\1\64\13\3\1\64\1\u0104\23\3\1\0\1\64\1\0"+
    "\1\65\3\0\1\66\1\0\1\67\2\0\1\3\1\62"+
    "\1\3\3\63\2\64\21\3\1\64\7\3\1\u0105\3\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\2\0\1\3\1\62\1\3\3\63\2\64"+
    "\3\3\1\u0101\15\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\11\3\1\u0102\7\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\2\0\1\3\1\62\1\3"+
    "\3\63\2\64\21\3\1\u0106\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\13\3"+
    "\1\64\1\3\1\u0104\22\3\1\0\1\64\1\0\1\65"+
    "\3\0\1\66\1\0\1\67\1\0\1\70\26\10\1\u0107"+
    "\43\10\1\70\1\64\1\70\1\10\5\70\1\75\2\70"+
    "\37\10\1\u0107\32\10\1\70\1\64\1\70\1\10\5\70"+
    "\1\75\2\70\27\10\1\u0108\42\10\1\70\1\64\1\70"+
    "\1\10\5\70\1\75\2\70\16\10\1\u0109\53\10\1\70"+
    "\1\64\1\70\1\10\5\70\1\75\2\70\40\10\1\u010a"+
    "\31\10\1\70\1\64\1\70\1\10\5\70\1\75\2\70"+
    "\21\10\1\u0109\50\10\1\70\1\64\1\70\1\10\5\70"+
    "\1\75\1\70\1\0\1\3\1\62\1\3\3\63\2\64"+
    "\21\3\1\64\2\3\1\u010b\10\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\65\3\0\1\66\1\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\64\12\3"+
    "\1\u010c\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\5\0\3\365\72\0\1\u010d\5\0"+
    "\6\u010e\1\0\36\u010e\1\0\24\u010e\1\0\1\u010e\1\366"+
    "\11\0\6\u010f\1\0\36\u010f\1\0\24\u010f\1\0\1\u010f"+
    "\2\0\1\367\12\0\3\365\66\0\1\366\1\0\1\367"+
    "\1\370\106\0\1\u010d\5\0\24\64\1\u0110\45\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\52\64\1\u0111"+
    "\17\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\35\64\1\u0112\34\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\53\64\1\u0113\16\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\52\64\1\u0114\17\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\53\64\1\u0115"+
    "\16\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\1\3\1\62\1\3\3\63\2\64\21\3\1\u0116\13\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\65\3\0\1\66"+
    "\1\0\1\67\1\0\1\u0117\72\u0102\1\u0117\1\64\1\u0117"+
    "\1\u0102\5\u0117\1\u0102\1\u0117\1\0\24\64\1\u0118\45\64"+
    "\1\0\1\64\1\0\1\64\5\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\21\3\1\u0119\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\65\3\0\1\66\1\0"+
    "\1\67\2\0\35\64\1\u011a\34\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\1\0\1\70\30\10\1\u011b\41\10"+
    "\1\70\1\64\1\70\1\10\5\70\1\75\2\70\41\10"+
    "\1\u011b\30\10\1\70\1\64\1\70\1\10\5\70\1\75"+
    "\1\70\1\0\1\3\1\62\1\3\3\63\2\64\6\3"+
    "\1\u011c\12\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\65\3\0\1\66\1\0\1\67\2\0\1\3"+
    "\1\62\1\3\3\63\2\64\11\3\1\u011c\7\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\65\3\0"+
    "\1\66\1\0\1\67\2\0\6\u010e\1\0\36\u010e\1\0"+
    "\24\u010e\1\0\1\u010e\7\0\1\u011d\2\0\6\u010f\1\0"+
    "\36\u010f\1\0\24\u010f\1\0\1\u010f\7\0\1\u011e\2\0"+
    "\16\64\1\u011f\53\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\25\64\1\u0120\44\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\21\64\1\u0121\50\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\36\64\1\u0122"+
    "\33\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\25\64\1\u0123\44\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\36\64\1\u0124\33\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\24\64\1\u0125\45\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\1\0\74\u0117\1\0"+
    "\11\u0117\1\0\16\64\1\u0126\53\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\35\64\1\u0127\34\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\21\64\1\u0128"+
    "\50\64\1\0\1\64\1\0\1\64\5\0\1\67\76\0"+
    "\1\371\107\0\1\371\7\0\32\64\1\u0129\37\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\50\64\1\u012a"+
    "\21\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\42\64\1\u012b\27\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\51\64\1\u012a\20\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\50\64\1\u012c\21\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\51\64\1\u012c"+
    "\20\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\16\64\1\u012d\53\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\32\64\1\u012e\37\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\21\64\1\u012f\50\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\42\64\1\u0130"+
    "\27\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\33\64\1\u0131\36\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\43\64\1\u0132\26\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\32\64\1\u0133\37\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\33\64\1\u0134"+
    "\36\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\42\64\1\u0135\27\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\43\64\1\u0136\26\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\16\64\1\u0137\53\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\21\64\1\u0138"+
    "\50\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\33\64\1\u0139\36\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\16\64\1\u013a\53\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\43\64\1\u013b\26\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\21\64\1\u013c"+
    "\50\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\34\64\1\u013d\35\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\44\64\1\u013e\25\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\16\64\1\u013f\53\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\34\64\1\u0140"+
    "\35\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\21\64\1\u0141\50\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\44\64\1\u0142\25\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\25\64\1\u0143\44\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\36\64\1\u0143"+
    "\33\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\34\64\1\u0144\35\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\25\64\1\u0145\44\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\2\0\44\64\1\u0146\25\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\67\2\0\36\64\1\u0145"+
    "\33\64\1\0\1\64\1\0\1\64\5\0\1\67\2\0"+
    "\25\64\1\u0147\44\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\67\2\0\36\64\1\u0147\33\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\67\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17710];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\54\1\3\11\2\1\1\0\1\1\2\0"+
    "\140\1\5\0\1\11\5\1\1\0\61\1\1\11\1\1"+
    "\1\0\35\1\13\0\3\1\1\0\2\1\1\0\6\1"+
    "\1\11\11\0\1\1\3\0\2\1\15\0\1\1\1\0"+
    "\1\1\26\0\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MAELEXCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MAELEXCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return new Symbol(symb.CS, yychar, yyline, yytext());
          }
        case 73: break;
        case 6: 
          { return new Symbol(symb.Comilla_d, yychar, yyline, yytext());
          }
        case 74: break;
        case 9: 
          { return new Symbol(symb.Parentesis_a, yychar, yyline, yytext());
          }
        case 75: break;
        case 53: 
          { return new Symbol(symb.RET, yychar, yyline, yytext());
          }
        case 76: break;
        case 35: 
          { return new Symbol(symb.CL, yychar, yyline, yytext());
          }
        case 77: break;
        case 8: 
          { return new Symbol(symb.Comilla_s, yychar, yyline, yytext());
          }
        case 78: break;
        case 71: 
          { return new Symbol(symb.BYTE_PTR, yychar, yyline, yytext());
          }
        case 79: break;
        case 37: 
          { return new Symbol(symb.CH, yychar, yyline, yytext());
          }
        case 80: break;
        case 25: 
          { return new Symbol(symb.BX, yychar, yyline, yytext());
          }
        case 81: break;
        case 14: 
          { return new Symbol(symb.Coma, yychar, yyline, yytext());
          }
        case 82: break;
        case 69: 
          { return new Symbol(symb.STACK, yychar, yyline, yytext());
          }
        case 83: break;
        case 3: 
          { /*Ignorar*/
          }
        case 84: break;
        case 5: 
          { return new Symbol(symb.Separadores, yychar, yyline, yytext());
          }
        case 85: break;
        case 15: 
          { return new Symbol(symb.ConstanteBin, yychar, yyline, yytext());
          }
        case 86: break;
        case 28: 
          { return new Symbol(symb.SS, yychar, yyline, yytext());
          }
        case 87: break;
        case 48: 
          { return new Symbol(symb.AAS, yychar, yyline, yytext());
          }
        case 88: break;
        case 46: 
          { return new Symbol(symb.STI, yychar, yyline, yytext());
          }
        case 89: break;
        case 44: 
          { return new Symbol(symb.EQU, yychar, yyline, yytext());
          }
        case 90: break;
        case 18: 
          { return new Symbol(symb.DS, yychar, yyline, yytext());
          }
        case 91: break;
        case 1: 
          { return new Symbol(symb.ERROR, yychar, yyline, yytext());
          }
        case 92: break;
        case 12: 
          { return new Symbol(symb.SinComa, yychar, yyline, yytext());
          }
        case 93: break;
        case 54: 
          { return new Symbol(symb.LES, yychar, yyline, yytext());
          }
        case 94: break;
        case 63: 
          { return new Symbol(symb.STOSB, yychar, yyline, yytext());
          }
        case 95: break;
        case 52: 
          { return new Symbol(symb.NOT, yychar, yyline, yytext());
          }
        case 96: break;
        case 43: 
          { return new Symbol(symb.DIV, yychar, yyline, yytext());
          }
        case 97: break;
        case 72: 
          { return new Symbol(symb.WORD_PTR, yychar, yyline, yytext());
          }
        case 98: break;
        case 17: 
          { return new Symbol(symb.DW, yychar, yyline, yytext());
          }
        case 99: break;
        case 20: 
          { return new Symbol(symb.DL, yychar, yyline, yytext());
          }
        case 100: break;
        case 55: 
          { return new Symbol(symb.JAE, yychar, yyline, yytext());
          }
        case 101: break;
        case 4: 
          { return new Symbol(symb.ConstanteDec, yychar, yyline, yytext());
          }
        case 102: break;
        case 22: 
          { return new Symbol(symb.DH, yychar, yyline, yytext());
          }
        case 103: break;
        case 61: 
          { return new Symbol(symb.PROC, yychar, yyline, yytext());
          }
        case 104: break;
        case 29: 
          { return new Symbol(symb.SP, yychar, yyline, yytext());
          }
        case 105: break;
        case 36: 
          { return new Symbol(symb.CX, yychar, yyline, yytext());
          }
        case 106: break;
        case 42: 
          { return new Symbol(symb.ConstanteHex, yychar, yyline, yytext());
          }
        case 107: break;
        case 11: 
          { return new Symbol(symb.Corchete_c, yychar, yyline, yytext());
          }
        case 108: break;
        case 30: 
          { return new Symbol(symb.SI, yychar, yyline, yytext());
          }
        case 109: break;
        case 58: 
          { return new Symbol(symb.ENDS, yychar, yyline, yytext());
          }
        case 110: break;
        case 27: 
          { return new Symbol(symb.ES, yychar, yyline, yytext());
          }
        case 111: break;
        case 64: 
          { return new Symbol(symb.TITLE, yychar, yyline, yytext());
          }
        case 112: break;
        case 50: 
          { return new Symbol(symb.CLI, yychar, yyline, yytext());
          }
        case 113: break;
        case 40: 
          { return new Symbol(symb.JC, yychar, yyline, yytext());
          }
        case 114: break;
        case 19: 
          { return new Symbol(symb.DI, yychar, yyline, yytext());
          }
        case 115: break;
        case 31: 
          { return new Symbol(symb.AL, yychar, yyline, yytext());
          }
        case 116: break;
        case 33: 
          { return new Symbol(symb.AH, yychar, yyline, yytext());
          }
        case 117: break;
        case 45: 
          { return new Symbol(symb.SUB, yychar, yyline, yytext());
          }
        case 118: break;
        case 49: 
          { return new Symbol(symb.AAM, yychar, yyline, yytext());
          }
        case 119: break;
        case 41: 
          { {return new Symbol(symb.Cadena, yychar, yyline, yytext());}
          }
        case 120: break;
        case 66: 
          { return new Symbol(symb.DATA, yychar, yyline, yytext());
          }
        case 121: break;
        case 70: 
          { return new Symbol(symb.LOOPNE, yychar, yyline, yytext());
          }
        case 122: break;
        case 62: 
          { return new Symbol(symb.IDIV, yychar, yyline, yytext());
          }
        case 123: break;
        case 21: 
          { return new Symbol(symb.DX, yychar, yyline, yytext());
          }
        case 124: break;
        case 57: 
          { return new Symbol(symb.JNA, yychar, yyline, yytext());
          }
        case 125: break;
        case 60: 
          { return new Symbol(symb.ENDP, yychar, yyline, yytext());
          }
        case 126: break;
        case 2: 
          { return new Symbol(symb.Simbolo, yychar, yyline, yytext());
          }
        case 127: break;
        case 51: 
          { return new Symbol(symb.MUL, yychar, yyline, yytext());
          }
        case 128: break;
        case 16: 
          { return new Symbol(symb.DB, yychar, yyline, yytext());
          }
        case 129: break;
        case 39: 
          { return new Symbol(symb.JS, yychar, yyline, yytext());
          }
        case 130: break;
        case 38: 
          { return new Symbol(symb.OR, yychar, yyline, yytext());
          }
        case 131: break;
        case 24: 
          { return new Symbol(symb.BL, yychar, yyline, yytext());
          }
        case 132: break;
        case 65: 
          { return new Symbol(symb.MACRO, yychar, yyline, yytext());
          }
        case 133: break;
        case 26: 
          { return new Symbol(symb.BH, yychar, yyline, yytext());
          }
        case 134: break;
        case 13: 
          { return new Symbol(symb.Etiqueta, yychar, yyline, yytext());
          }
        case 135: break;
        case 32: 
          { return new Symbol(symb.AX, yychar, yyline, yytext());
          }
        case 136: break;
        case 68: 
          { return new Symbol(symb.DUP, yychar, yyline, yytext());
          }
        case 137: break;
        case 59: 
          { return new Symbol(symb.ENDM, yychar, yyline, yytext());
          }
        case 138: break;
        case 7: 
          { return new Symbol(symb.Dos_puntos, yychar, yyline, yytext());
          }
        case 139: break;
        case 47: 
          { return new Symbol(symb.ADD, yychar, yyline, yytext());
          }
        case 140: break;
        case 56: 
          { return new Symbol(symb.JGE, yychar, yyline, yytext());
          }
        case 141: break;
        case 23: 
          { return new Symbol(symb.BP, yychar, yyline, yytext());
          }
        case 142: break;
        case 67: 
          { return new Symbol(symb.CODE, yychar, yyline, yytext());
          }
        case 143: break;
        case 10: 
          { return new Symbol(symb.Corchete_a, yychar, yyline, yytext());
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(symb.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
