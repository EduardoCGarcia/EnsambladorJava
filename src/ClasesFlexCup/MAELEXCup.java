/* The following code was generated by JFlex 1.4.3 on 11/11/21 12:14 */

package Controladores;
import ClasesFlexCup.symb;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/11/21 12:14 from the specification file
 * <tt>D:/Ensamblador/ProyectoEnsamblador/src/ArchivosFlexCup/MAELEXCup.flex</tt>
 */
class MAELEXCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  6, 59,  0,  0,  6,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    25,  0, 60,  0, 67,  0,  0, 62, 63, 64,  5,  0,  7,  0, 37,  0, 
    69,  4,  3,  3,  3,  3,  3,  3,  3,  3, 61, 58,  0,  0,  0, 68, 
    70, 31, 11, 32, 10, 17,  2, 34, 57, 47, 53, 33, 49, 35, 36, 39, 
    43, 18, 41, 29, 30, 19, 51, 13, 55, 45,  1, 65,  0, 66,  0,  2, 
     0, 22,  9, 23,  8, 14,  2, 26, 56, 46, 52, 24, 48, 27, 28, 38, 
    42, 15, 40, 20, 21, 16, 50, 12, 54, 44,  1,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\2\5\24\2\1\4"+
    "\14\2\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\3\1\1\1\2\1\0\1\14\1\15\2\0\2\4"+
    "\1\3\1\4\1\16\2\4\2\5\1\17\1\4\1\20"+
    "\1\21\1\2\1\22\1\2\1\23\1\24\1\25\1\26"+
    "\1\27\1\2\1\30\1\31\1\32\2\2\1\23\4\2"+
    "\1\33\4\2\1\34\1\2\1\35\1\36\3\2\1\37"+
    "\1\40\1\41\1\42\1\2\1\43\1\44\1\45\11\2"+
    "\1\43\3\2\6\4\1\46\12\2\1\47\1\2\1\50"+
    "\5\2\4\0\1\4\2\3\1\16\1\3\1\0\2\51"+
    "\3\4\2\2\1\52\6\2\1\53\2\2\1\54\2\2"+
    "\1\55\1\2\1\56\1\57\1\60\1\2\1\61\1\62"+
    "\1\2\1\63\5\2\6\4\1\64\4\2\1\65\2\2"+
    "\1\66\1\67\1\70\1\0\1\71\1\4\1\16\1\2"+
    "\1\1\1\0\6\2\1\72\1\73\1\74\12\2\6\4"+
    "\1\75\1\76\2\2\1\71\13\0\1\2\1\77\1\100"+
    "\1\0\1\101\1\2\1\0\1\102\1\4\1\103\1\4"+
    "\2\2\1\104\11\0\1\100\3\0\1\105\1\106\15\0"+
    "\1\107\1\0\1\110\26\0\1\102\1\0\1\103\1\0"+
    "\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u04b7\0\u04fe\0\u0545\0\u058c\0\u05d3\0\u061a\0\u0661"+
    "\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4\0\u080b\0\u0852\0\u0899"+
    "\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1"+
    "\0\u0b18\0\u0b5f\0\u0ba6\0\u0163\0\u0bed\0\107\0\107\0\107"+
    "\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d09\0\u0d09\0\u0d50\0\u0d97"+
    "\0\u0dde\0\u0e25\0\u0e25\0\u0e6c\0\u0dde\0\u0eb3\0\u0efa\0\u0f41"+
    "\0\u0f88\0\u0eb3\0\u0fcf\0\216\0\216\0\u1016\0\216\0\u105d"+
    "\0\u10a4\0\216\0\216\0\216\0\216\0\u10eb\0\216\0\216"+
    "\0\216\0\u1132\0\u1179\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc"+
    "\0\216\0\u1323\0\u136a\0\u13b1\0\u13f8\0\216\0\u143f\0\216"+
    "\0\216\0\u1486\0\u14cd\0\u1514\0\216\0\216\0\216\0\216"+
    "\0\u155b\0\u15a2\0\216\0\216\0\u15e9\0\u1630\0\u1677\0\u16be"+
    "\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6"+
    "\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\216"+
    "\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u1d1f"+
    "\0\u1d66\0\u1dad\0\216\0\u1df4\0\216\0\u1e3b\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u0ba6\0\u1fe5\0\u0bed\0\u202c\0\u2073"+
    "\0\u20ba\0\u202c\0\u2101\0\u2148\0\107\0\u0eb3\0\u218f\0\u21d6"+
    "\0\u221d\0\u2264\0\u22ab\0\216\0\u22f2\0\u2339\0\u2380\0\u23c7"+
    "\0\u240e\0\u2455\0\216\0\u249c\0\u24e3\0\216\0\u252a\0\u2571"+
    "\0\216\0\u25b8\0\216\0\216\0\216\0\u25ff\0\216\0\216"+
    "\0\u2646\0\216\0\u268d\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0"+
    "\0\u2837\0\u287e\0\u28c5\0\u290c\0\u2953\0\216\0\u299a\0\u29e1"+
    "\0\u2a28\0\u2a6f\0\216\0\u2ab6\0\u2afd\0\216\0\216\0\216"+
    "\0\u2b44\0\u0dde\0\u2b8b\0\u2b8b\0\107\0\u0163\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\216\0\216\0\216"+
    "\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u2fb4"+
    "\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5\0\u31ec"+
    "\0\216\0\216\0\u3233\0\u327a\0\u0d09\0\u32c1\0\u3308\0\u334f"+
    "\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u3587"+
    "\0\u35ce\0\216\0\u3615\0\u365c\0\216\0\u36a3\0\u36ea\0\u0163"+
    "\0\u3731\0\u0163\0\u3778\0\u37bf\0\u3806\0\107\0\u384d\0\u3894"+
    "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u3acc"+
    "\0\u3b13\0\u3b5a\0\u3ba1\0\u0163\0\216\0\u3be8\0\u3c2f\0\u3c76"+
    "\0\u3cbd\0\u3d04\0\u3d4b\0\u3d92\0\u3dd9\0\u3e20\0\u3e67\0\u3eae"+
    "\0\u3ef5\0\u3f3c\0\u0d09\0\u3f83\0\u0d09\0\u3fca\0\u4011\0\u4058"+
    "\0\u409f\0\u40e6\0\u412d\0\u4174\0\u41bb\0\u4202\0\u4249\0\u4290"+
    "\0\u42d7\0\u431e\0\u4365\0\u43ac\0\u43f3\0\u443a\0\u4481\0\u44c8"+
    "\0\u450f\0\u4556\0\u459d\0\u0d09\0\u45e4\0\u0d09\0\u462b\0\u0d09";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\2\3\1\20"+
    "\2\3\1\21\1\22\1\23\1\24\1\3\1\7\1\3"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\2\3\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\2\3\1\44\1\45\1\46\1\47\2\3\1\50\1\51"+
    "\4\3\1\52\1\7\1\53\1\54\1\55\2\56\1\57"+
    "\1\60\1\6\1\2\1\61\1\62\110\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\71\2\4\1\72\1\64\1\73\21\71"+
    "\1\64\13\71\1\72\24\71\1\0\1\64\1\0\1\72"+
    "\5\0\1\74\1\0\1\4\2\0\2\71\1\4\1\5"+
    "\1\72\1\64\1\73\1\71\1\75\1\71\1\75\15\71"+
    "\1\64\13\71\1\72\24\71\1\0\1\64\1\0\1\72"+
    "\5\0\1\74\1\0\1\5\1\0\1\76\71\6\1\76"+
    "\1\64\1\76\1\6\5\76\1\77\1\76\1\6\1\76"+
    "\1\0\5\64\2\7\21\64\1\7\40\64\1\0\1\7"+
    "\1\0\1\64\5\0\1\70\1\0\1\64\1\0\1\76"+
    "\5\6\2\100\21\6\1\101\40\6\1\76\1\7\1\102"+
    "\1\6\1\103\4\76\1\77\1\76\1\6\1\76\1\0"+
    "\2\3\2\63\2\64\1\65\1\3\1\104\2\3\1\105"+
    "\3\3\1\106\3\3\1\107\1\3\1\110\2\3\1\64"+
    "\13\3\1\64\10\3\1\111\1\3\1\112\5\3\1\113"+
    "\1\3\1\114\1\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\13\3\1\64\4\3\1\115"+
    "\1\3\1\116\3\3\1\117\5\3\1\120\1\3\1\121"+
    "\1\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\3\3\1\104\1\3\1\105\5\3\1\122\5\3\1\64"+
    "\3\3\1\107\1\3\1\123\5\3\1\64\11\3\1\124"+
    "\1\3\1\112\5\3\1\113\1\3\1\114\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\5\3\1\115\1\3\1\125\3\3\1\117\5\3"+
    "\1\120\1\3\1\121\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\13\3\1\64\1\126\23\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\64\13\3\1\64\1\3\1\127\22\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\7\3\1\130\4\3"+
    "\1\131\4\3\1\64\2\3\1\132\10\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\12\3"+
    "\1\133\6\3\1\64\3\3\1\131\6\3\1\134\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\10\3\1\135\3\3\1\136\1\137\3\3\1\64\13\3"+
    "\1\64\4\3\1\140\3\3\1\141\13\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\10\3\1\142\13\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\1\143\15\3\1\144\2\3\1\64"+
    "\13\3\1\64\12\3\1\145\5\3\1\146\1\3\1\147"+
    "\1\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\14\3\1\150\4\3\1\64\13\3\1\64\1\151\11\3"+
    "\1\152\5\3\1\153\1\3\1\154\1\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\10\3\1\155\5\3"+
    "\1\156\2\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\1\157\23\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\13\3\1\160\5\3\1\64\3\3\1\136"+
    "\1\161\6\3\1\64\5\3\1\140\3\3\1\141\12\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\64\13\3\1\64\11\3\1\162\12\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\2\3\1\163\16\3"+
    "\1\64\5\3\1\164\5\3\1\64\13\3\1\145\5\3"+
    "\1\146\1\3\1\147\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\3\3\1\150\7\3\1\64"+
    "\1\3\1\165\11\3\1\166\5\3\1\153\1\3\1\154"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\13\3"+
    "\1\167\5\3\1\64\5\3\1\170\5\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\64\13\3\1\64\1\3\1\171\22\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\1\0\1\76\7\6\1\172\1\6\1\173\11\6\1\174"+
    "\2\6\1\175\5\6\1\176\2\6\1\177\31\6\1\76"+
    "\1\64\1\76\1\6\5\76\1\77\1\76\1\6\1\76"+
    "\1\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\2\3\1\200\21\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\13\3\1\64\3\3"+
    "\1\200\20\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\6\3\1\201\12\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\11\3"+
    "\1\202\7\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\2\3\1\203\21\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\13\3\1\64\3\3"+
    "\1\204\20\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\1\205\20\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\2\3\1\206"+
    "\16\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\6\3\1\207\12\3\1\64"+
    "\13\3\1\64\1\210\23\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\11\3\1\211\7\3\1\64\13\3"+
    "\1\64\1\3\1\212\22\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\14\3\1\213\1\3\1\214\1\215"+
    "\1\3\1\64\1\216\1\3\1\217\10\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\64\3\3\1\213\1\3\1\220\1\215\1\3\1\221"+
    "\1\3\1\222\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\1\0\73\52"+
    "\1\0\13\52\1\0\71\223\1\0\1\223\1\224\1\223"+
    "\5\0\1\223\1\0\1\223\2\0\71\225\1\0\1\225"+
    "\1\0\1\225\1\226\4\0\1\225\1\0\1\225\2\0"+
    "\1\71\1\227\1\230\1\231\1\72\1\64\1\73\1\227"+
    "\1\232\1\227\1\232\2\71\1\227\2\71\1\227\4\71"+
    "\2\227\1\71\1\64\5\71\2\227\4\71\1\72\24\71"+
    "\1\0\1\64\1\0\1\72\5\0\1\74\1\0\1\233"+
    "\2\0\2\62\5\0\21\62\1\0\13\62\1\0\24\62"+
    "\16\0\4\63\3\64\21\63\1\64\13\63\1\64\24\63"+
    "\1\0\1\64\1\0\1\66\5\0\1\70\1\0\1\63"+
    "\2\0\71\64\1\0\1\64\1\0\1\64\5\0\1\70"+
    "\1\0\1\64\4\0\2\234\100\0\1\234\2\0\71\64"+
    "\1\0\1\64\1\235\1\64\1\235\4\0\1\70\1\0"+
    "\1\64\2\0\2\71\5\64\21\71\1\64\13\71\1\64"+
    "\24\71\1\0\1\64\1\0\1\64\5\0\1\70\1\0"+
    "\1\64\2\0\4\64\1\72\1\64\1\72\35\64\1\72"+
    "\24\64\1\0\1\64\1\0\1\72\5\0\1\74\1\0"+
    "\1\64\2\0\4\64\1\72\1\64\1\72\35\64\1\72"+
    "\24\64\1\0\1\64\1\235\1\72\1\235\4\0\1\74"+
    "\1\0\1\64\1\0\73\76\1\0\14\76\71\6\1\76"+
    "\1\64\1\236\1\6\1\236\4\76\1\77\1\76\1\6"+
    "\2\76\5\6\2\100\21\6\1\100\40\6\1\76\1\7"+
    "\1\76\1\6\5\76\1\77\1\76\1\6\2\76\2\6"+
    "\2\237\1\6\2\100\21\6\1\100\40\6\1\76\1\7"+
    "\1\76\1\6\5\76\1\77\1\76\1\237\10\76\1\240"+
    "\63\76\1\0\7\76\1\241\3\76\1\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\13\3\1\64\4\3\1\242"+
    "\17\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\15\3\1\243\3\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\21\3\1\64"+
    "\13\3\1\64\14\3\1\244\7\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\15\3\1\245\3\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\13\3\1\64\5\3\1\246"+
    "\16\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\21\3\1\64\4\3\1\247\6\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\21\3\1\64"+
    "\13\3\1\64\15\3\1\244\6\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\4\3\1\250"+
    "\6\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\13\3\1\64\2\3\1\251"+
    "\21\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\21\3\1\64\13\3\1\64\3\3\1\252\20\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\10\3\1\253"+
    "\10\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\1\254\20\3\1\64\13\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\13\3\1\253\5\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\2\3"+
    "\1\255\16\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\1\3\1\256\17\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\16\3\1\257\2\3\1\64\13\3"+
    "\1\64\1\260\7\3\1\261\13\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\15\3\1\262\3\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\1\263\20\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\14\3"+
    "\1\264\4\3\1\64\1\3\1\265\11\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\1\266"+
    "\20\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\13\3\1\64"+
    "\10\3\1\267\13\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\13\3\1\64\12\3\1\270"+
    "\11\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\17\3\1\271\1\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\15\3\1\272"+
    "\3\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\3\3\1\256\15\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\5\3\1\273\5\3\1\64"+
    "\1\3\1\274\7\3\1\261\12\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\4\3\1\275"+
    "\6\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\2\3\1\263\16\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\21\3\1\64\3\3\1\264\5\3\1\265\1\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\2\3\1\276\16\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\21\3\1\64"+
    "\13\3\1\64\11\3\1\267\12\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\13\3\1\64"+
    "\13\3\1\270\10\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\64\6\3\1\277\4\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\21\3\1\64\4\3\1\272\6\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\1\0\1\76\25\6\1\300\43\6\1\76\1\64"+
    "\1\76\1\6\5\76\1\77\1\76\1\6\2\76\36\6"+
    "\1\301\32\6\1\76\1\64\1\76\1\6\5\76\1\77"+
    "\1\76\1\6\2\76\24\6\1\302\44\6\1\76\1\64"+
    "\1\76\1\6\5\76\1\77\1\76\1\6\2\76\45\6"+
    "\1\303\23\6\1\76\1\64\1\76\1\6\5\76\1\77"+
    "\1\76\1\6\2\76\35\6\1\304\33\6\1\76\1\64"+
    "\1\76\1\6\5\76\1\77\1\76\1\6\2\76\46\6"+
    "\1\305\22\6\1\76\1\64\1\76\1\6\5\76\1\77"+
    "\1\76\1\6\1\76\1\0\2\3\2\63\2\64\1\65"+
    "\15\3\1\306\3\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\21\3\1\64"+
    "\4\3\1\306\6\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\13\3\1\64"+
    "\1\307\23\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\21\3\1\64\13\3\1\64\1\3\1\310\22\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\64\13\3\1\64\10\3\1\311\13\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\11\3\1\312\12\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\14\3\1\313\4\3\1\64\13\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\21\3\1\64\13\3\1\64\1\314\23\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\21\3\1\64"+
    "\3\3\1\313\7\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\13\3\1\64"+
    "\1\3\1\315\22\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\6\3\1\316\12\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\6\3\1\317\12\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\16\3\1\320"+
    "\2\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\11\3\1\316\7\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\11\3\1\317\7\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\21\3\1\64\5\3\1\320\5\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\71\223\1\0\1\223\1\235\1\223\5\0"+
    "\1\223\1\0\1\223\2\0\71\225\1\0\1\225\1\0"+
    "\1\225\1\235\4\0\1\225\1\0\1\225\2\0\1\71"+
    "\1\227\2\321\3\64\4\227\2\71\1\227\2\71\1\227"+
    "\4\71\2\227\1\71\1\64\5\71\2\227\4\71\1\64"+
    "\22\71\2\322\1\0\1\64\1\0\1\64\5\0\1\70"+
    "\1\0\1\321\2\0\1\71\1\323\2\230\1\72\1\64"+
    "\1\73\4\323\2\71\1\323\2\71\1\323\4\71\2\323"+
    "\1\71\1\64\5\71\2\323\4\71\1\72\22\71\2\322"+
    "\1\0\1\64\1\0\1\72\5\0\1\74\1\0\1\230"+
    "\2\0\1\71\1\323\1\230\1\231\1\72\1\64\1\73"+
    "\1\323\1\324\1\323\1\324\2\71\1\323\2\71\1\323"+
    "\4\71\2\323\1\71\1\64\5\71\2\323\4\71\1\72"+
    "\22\71\2\322\1\0\1\64\1\0\1\72\5\0\1\74"+
    "\1\0\1\231\2\0\1\71\1\227\1\230\1\231\1\72"+
    "\1\64\1\73\1\227\1\232\1\227\1\232\2\71\1\227"+
    "\2\71\1\227\4\71\2\227\1\71\1\64\5\71\2\227"+
    "\4\71\1\72\22\71\2\322\1\0\1\64\1\0\1\72"+
    "\5\0\1\74\1\0\1\233\4\0\2\234\75\0\1\325"+
    "\2\0\1\234\1\0\1\76\2\6\2\237\63\6\2\326"+
    "\1\76\1\64\1\76\1\6\5\76\1\77\1\76\1\237"+
    "\74\76\1\0\2\76\1\103\103\76\1\0\2\76\1\236"+
    "\4\76\1\241\3\76\1\0\2\3\2\63\2\64\1\65"+
    "\21\3\1\64\13\3\1\64\4\3\1\242\17\3\1\0"+
    "\1\64\1\0\1\66\1\0\1\327\1\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\16\3\1\330\2\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\6\3\1\331"+
    "\12\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\13\3\1\64"+
    "\5\3\1\246\16\3\1\0\1\64\1\0\1\66\1\0"+
    "\1\327\1\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\64\5\3\1\332"+
    "\5\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\11\3\1\333\7\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\1\334\20\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\2\3\1\335\16\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\14\3\1\336\4\3\1\64\1\3"+
    "\1\337\11\3\1\64\4\3\1\340\17\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\3\3"+
    "\1\336\5\3\1\337\1\3\1\64\5\3\1\340\16\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\17\3"+
    "\1\341\1\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\14\3\1\342\4\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\13\3\1\64\12\3"+
    "\1\343\11\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\6\3\1\344\12\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\64\13\3\1\64\2\3\1\345\21\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\6\3"+
    "\1\346\4\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\3\3\1\347\7\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\21\3\1\64\13\3\1\64\13\3\1\350\10\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\11\3"+
    "\1\351\7\3\1\64\13\3\1\64\24\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\3\3\1\352\20\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\1\0\1\76"+
    "\24\6\1\353\44\6\1\76\1\64\1\76\1\6\5\76"+
    "\1\77\1\76\1\6\2\76\35\6\1\354\33\6\1\76"+
    "\1\64\1\76\1\6\5\76\1\77\1\76\1\6\2\76"+
    "\25\6\1\355\43\6\1\76\1\64\1\76\1\6\5\76"+
    "\1\77\1\76\1\6\2\76\7\6\1\356\61\6\1\76"+
    "\1\64\1\76\1\6\5\76\1\77\1\76\1\6\2\76"+
    "\36\6\1\357\32\6\1\76\1\64\1\76\1\6\5\76"+
    "\1\77\1\76\1\6\2\76\11\6\1\360\57\6\1\76"+
    "\1\64\1\76\1\6\5\76\1\77\1\76\1\6\1\76"+
    "\1\0\2\3\2\63\2\64\1\65\17\3\1\361\1\3"+
    "\1\64\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\6\3\1\361\4\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\21\3\1\64\13\3\1\64\14\3\1\362\7\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\64\13\3\1\64\15\3\1\362\6\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\13\3"+
    "\1\64\4\3\1\363\17\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\13\3\1\64\5\3"+
    "\1\364\16\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\64\2\321\63\64"+
    "\2\365\1\0\1\64\1\0\1\64\5\0\1\70\1\0"+
    "\1\321\2\0\1\71\1\323\5\64\4\323\2\71\1\323"+
    "\2\71\1\323\4\71\2\323\1\71\1\64\5\71\2\323"+
    "\4\71\1\64\22\71\2\322\1\0\1\64\1\0\1\64"+
    "\5\0\1\70\1\0\1\64\4\0\2\366\67\0\1\367"+
    "\1\0\1\370\1\371\4\0\1\372\1\366\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\373\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\374\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\375\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\376\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\377\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\u0100\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\20\3\1\u0101\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\1\3\1\u0102\17\3\1\64\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\2\3\2\63\2\64\1\65\6\3\1\u0103"+
    "\12\3\1\64\13\3\1\64\24\3\1\0\1\64\1\0"+
    "\1\66\3\0\1\67\1\0\1\70\1\0\1\63\2\0"+
    "\2\3\2\63\2\64\1\65\21\3\1\u0104\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\2\3\2\63\2\64\1\65"+
    "\21\3\1\64\13\3\1\64\1\u0105\23\3\1\0\1\64"+
    "\1\0\1\66\3\0\1\67\1\0\1\70\1\0\1\63"+
    "\2\0\2\3\2\63\2\64\1\65\21\3\1\64\7\3"+
    "\1\u0106\3\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\3\3\1\u0102\15\3\1\64\13\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\11\3\1\u0103\7\3\1\64\13\3\1\64\24\3"+
    "\1\0\1\64\1\0\1\66\3\0\1\67\1\0\1\70"+
    "\1\0\1\63\2\0\2\3\2\63\2\64\1\65\21\3"+
    "\1\u0107\13\3\1\64\24\3\1\0\1\64\1\0\1\66"+
    "\3\0\1\67\1\0\1\70\1\0\1\63\2\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\13\3\1\64\1\3"+
    "\1\u0105\22\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\1\0\1\76\25\6\1\u0108"+
    "\43\6\1\76\1\64\1\76\1\6\5\76\1\77\1\76"+
    "\1\6\2\76\36\6\1\u0108\32\6\1\76\1\64\1\76"+
    "\1\6\5\76\1\77\1\76\1\6\2\76\26\6\1\u0109"+
    "\42\6\1\76\1\64\1\76\1\6\5\76\1\77\1\76"+
    "\1\6\2\76\15\6\1\u010a\53\6\1\76\1\64\1\76"+
    "\1\6\5\76\1\77\1\76\1\6\2\76\37\6\1\u010b"+
    "\31\6\1\76\1\64\1\76\1\6\5\76\1\77\1\76"+
    "\1\6\2\76\20\6\1\u010a\50\6\1\76\1\64\1\76"+
    "\1\6\5\76\1\77\1\76\1\6\1\76\1\0\2\3"+
    "\2\63\2\64\1\65\21\3\1\64\2\3\1\u010c\10\3"+
    "\1\64\24\3\1\0\1\64\1\0\1\66\3\0\1\67"+
    "\1\0\1\70\1\0\1\63\2\0\2\3\2\63\2\64"+
    "\1\65\21\3\1\64\12\3\1\u010d\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\4\0\2\366\73\0\1\u010e\4\0\1\366\2\0"+
    "\4\u010f\1\0\37\u010f\1\0\24\u010f\1\0\1\u010f\1\367"+
    "\10\0\1\u010f\2\0\4\u0110\1\0\37\u0110\1\0\24\u0110"+
    "\1\0\1\u0110\2\0\1\370\6\0\1\u0110\4\0\2\366"+
    "\67\0\1\367\1\0\1\370\1\371\5\0\1\366\101\0"+
    "\1\u010e\7\0\23\64\1\u0111\45\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\70\1\0\1\64\2\0\51\64\1\u0112"+
    "\17\64\1\0\1\64\1\0\1\64\5\0\1\70\1\0"+
    "\1\64\2\0\34\64\1\u0113\34\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\70\1\0\1\64\2\0\52\64\1\u0114"+
    "\16\64\1\0\1\64\1\0\1\64\5\0\1\70\1\0"+
    "\1\64\2\0\51\64\1\u0115\17\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\70\1\0\1\64\2\0\52\64\1\u0116"+
    "\16\64\1\0\1\64\1\0\1\64\5\0\1\70\1\0"+
    "\1\64\2\0\2\3\2\63\2\64\1\65\21\3\1\u0117"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\1\0\1\u0118\71\u0103"+
    "\1\u0118\1\64\1\u0118\1\u0103\5\u0118\1\u0103\1\u0118\1\u0103"+
    "\1\u0118\1\0\23\64\1\u0119\45\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\70\1\0\1\64\2\0\2\3\2\63"+
    "\2\64\1\65\21\3\1\u011a\13\3\1\64\24\3\1\0"+
    "\1\64\1\0\1\66\3\0\1\67\1\0\1\70\1\0"+
    "\1\63\2\0\34\64\1\u011b\34\64\1\0\1\64\1\0"+
    "\1\64\5\0\1\70\1\0\1\64\1\0\1\76\27\6"+
    "\1\u011c\41\6\1\76\1\64\1\76\1\6\5\76\1\77"+
    "\1\76\1\6\2\76\40\6\1\u011c\30\6\1\76\1\64"+
    "\1\76\1\6\5\76\1\77\1\76\1\6\1\76\1\0"+
    "\2\3\2\63\2\64\1\65\6\3\1\u011d\12\3\1\64"+
    "\13\3\1\64\24\3\1\0\1\64\1\0\1\66\3\0"+
    "\1\67\1\0\1\70\1\0\1\63\2\0\2\3\2\63"+
    "\2\64\1\65\11\3\1\u011d\7\3\1\64\13\3\1\64"+
    "\24\3\1\0\1\64\1\0\1\66\3\0\1\67\1\0"+
    "\1\70\1\0\1\63\2\0\4\u010f\1\0\37\u010f\1\0"+
    "\24\u010f\1\0\1\u010f\7\0\1\u011e\1\0\1\u010f\2\0"+
    "\4\u0110\1\0\37\u0110\1\0\24\u0110\1\0\1\u0110\7\0"+
    "\1\u011f\1\0\1\u0110\2\0\15\64\1\u0120\53\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\24\64\1\u0121\44\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\20\64\1\u0122\50\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\35\64\1\u0123\33\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\24\64\1\u0124\44\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\35\64\1\u0125\33\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\23\64\1\u0126\45\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\1\0"+
    "\73\u0118\1\0\13\u0118\1\0\15\64\1\u0127\53\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\34\64\1\u0128\34\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\20\64\1\u0129\50\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\75\0"+
    "\1\372\110\0\1\372\11\0\31\64\1\u012a\37\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\47\64\1\u012b\21\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\41\64\1\u012c\27\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\50\64\1\u012b\20\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\47\64\1\u012d\21\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\50\64\1\u012d\20\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\15\64\1\u012e\53\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\31\64\1\u012f\37\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\20\64\1\u0130\50\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\41\64\1\u0131\27\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\32\64\1\u0132\36\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\42\64\1\u0133\26\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\31\64\1\u0134\37\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\32\64\1\u0135\36\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\41\64\1\u0136\27\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\42\64\1\u0137\26\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\15\64\1\u0138\53\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\20\64\1\u0139\50\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\32\64\1\u013a\36\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\15\64\1\u013b\53\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\42\64\1\u013c\26\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\20\64\1\u013d\50\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\33\64\1\u013e\35\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\43\64\1\u013f\25\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\15\64\1\u0140\53\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\33\64\1\u0141\35\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\20\64\1\u0142\50\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\43\64\1\u0143\25\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\24\64\1\u0144\44\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\35\64\1\u0144\33\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\33\64\1\u0145\35\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\24\64\1\u0146\44\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\43\64\1\u0147\25\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\35\64\1\u0146\33\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\2\0\24\64\1\u0148\44\64\1\0"+
    "\1\64\1\0\1\64\5\0\1\70\1\0\1\64\2\0"+
    "\35\64\1\u0148\33\64\1\0\1\64\1\0\1\64\5\0"+
    "\1\70\1\0\1\64\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18034];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\53\1\3\11\3\1\1\0\2\1\2\0"+
    "\132\1\4\0\5\1\1\0\1\11\63\1\1\0\3\1"+
    "\1\11\1\1\1\0\36\1\13\0\3\1\1\0\2\1"+
    "\1\0\6\1\1\11\11\0\1\1\3\0\2\1\15\0"+
    "\1\1\1\0\1\1\26\0\1\1\1\0\1\1\1\0"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type,yyline,yycolumn,value);
    }
    private Symbol symbol(int type){
        return new Symbol(type,yyline,yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MAELEXCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MAELEXCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { return new Symbol(symb.CS, yychar, yyline, yytext());
          }
        case 73: break;
        case 6: 
          { return new Symbol(symb.Comilla_d, yychar, yyline, yytext());
          }
        case 74: break;
        case 9: 
          { return new Symbol(symb.Parentesis_a, yychar, yyline, yytext());
          }
        case 75: break;
        case 52: 
          { return new Symbol(symb.RET, yychar, yyline, yytext());
          }
        case 76: break;
        case 35: 
          { return new Symbol(symb.CL, yychar, yyline, yytext());
          }
        case 77: break;
        case 8: 
          { return new Symbol(symb.Comilla_s, yychar, yyline, yytext());
          }
        case 78: break;
        case 71: 
          { return new Symbol(symb.BYTE_PTR, yychar, yyline, yytext());
          }
        case 79: break;
        case 37: 
          { return new Symbol(symb.CH, yychar, yyline, yytext());
          }
        case 80: break;
        case 25: 
          { return new Symbol(symb.BX, yychar, yyline, yytext());
          }
        case 81: break;
        case 15: 
          { return new Symbol(symb.Coma, yychar, yyline, yytext());
          }
        case 82: break;
        case 69: 
          { return new Symbol(symb.STACK, yychar, yyline, yytext());
          }
        case 83: break;
        case 5: 
          { /*Ignorar*/
          }
        case 84: break;
        case 4: 
          { return new Symbol(symb.Separadores, yychar, yyline, yytext());
          }
        case 85: break;
        case 14: 
          { return new Symbol(symb.ConstanteBin, yychar, yyline, yytext());
          }
        case 86: break;
        case 28: 
          { return new Symbol(symb.SS, yychar, yyline, yytext());
          }
        case 87: break;
        case 47: 
          { return new Symbol(symb.AAS, yychar, yyline, yytext());
          }
        case 88: break;
        case 45: 
          { return new Symbol(symb.STI, yychar, yyline, yytext());
          }
        case 89: break;
        case 43: 
          { return new Symbol(symb.EQU, yychar, yyline, yytext());
          }
        case 90: break;
        case 18: 
          { return new Symbol(symb.DS, yychar, yyline, yytext());
          }
        case 91: break;
        case 1: 
          { return new Symbol(symb.ERROR, yychar, yyline, yytext());
          }
        case 92: break;
        case 12: 
          { return new Symbol(symb.SinComa, yychar, yyline, yytext());
          }
        case 93: break;
        case 53: 
          { return new Symbol(symb.LES, yychar, yyline, yytext());
          }
        case 94: break;
        case 63: 
          { return new Symbol(symb.STOSB, yychar, yyline, yytext());
          }
        case 95: break;
        case 51: 
          { return new Symbol(symb.NOT, yychar, yyline, yytext());
          }
        case 96: break;
        case 42: 
          { return new Symbol(symb.DIV, yychar, yyline, yytext());
          }
        case 97: break;
        case 72: 
          { return new Symbol(symb.WORD_PTR, yychar, yyline, yytext());
          }
        case 98: break;
        case 17: 
          { return new Symbol(symb.DW, yychar, yyline, yytext());
          }
        case 99: break;
        case 20: 
          { return new Symbol(symb.DL, yychar, yyline, yytext());
          }
        case 100: break;
        case 54: 
          { return new Symbol(symb.JAE, yychar, yyline, yytext());
          }
        case 101: break;
        case 3: 
          { return new Symbol(symb.ConstanteDec, yychar, yyline, yytext());
          }
        case 102: break;
        case 22: 
          { return new Symbol(symb.DH, yychar, yyline, yytext());
          }
        case 103: break;
        case 61: 
          { return new Symbol(symb.PROC, yychar, yyline, yytext());
          }
        case 104: break;
        case 29: 
          { return new Symbol(symb.SP, yychar, yyline, yytext());
          }
        case 105: break;
        case 36: 
          { return new Symbol(symb.CX, yychar, yyline, yytext());
          }
        case 106: break;
        case 57: 
          { return new Symbol(symb.ConstanteHex, yychar, yyline, yytext());
          }
        case 107: break;
        case 11: 
          { return new Symbol(symb.Corchete_c, yychar, yyline, yytext());
          }
        case 108: break;
        case 30: 
          { return new Symbol(symb.SI, yychar, yyline, yytext());
          }
        case 109: break;
        case 58: 
          { return new Symbol(symb.ENDS, yychar, yyline, yytext());
          }
        case 110: break;
        case 27: 
          { return new Symbol(symb.ES, yychar, yyline, yytext());
          }
        case 111: break;
        case 64: 
          { return new Symbol(symb.TITLE, yychar, yyline, yytext());
          }
        case 112: break;
        case 49: 
          { return new Symbol(symb.CLI, yychar, yyline, yytext());
          }
        case 113: break;
        case 40: 
          { return new Symbol(symb.JC, yychar, yyline, yytext());
          }
        case 114: break;
        case 19: 
          { return new Symbol(symb.DI, yychar, yyline, yytext());
          }
        case 115: break;
        case 31: 
          { return new Symbol(symb.AL, yychar, yyline, yytext());
          }
        case 116: break;
        case 33: 
          { return new Symbol(symb.AH, yychar, yyline, yytext());
          }
        case 117: break;
        case 44: 
          { return new Symbol(symb.SUB, yychar, yyline, yytext());
          }
        case 118: break;
        case 48: 
          { return new Symbol(symb.AAM, yychar, yyline, yytext());
          }
        case 119: break;
        case 41: 
          { {return new Symbol(symb.Cadena, yychar, yyline, yytext());}
          }
        case 120: break;
        case 66: 
          { return new Symbol(symb.DATA, yychar, yyline, yytext());
          }
        case 121: break;
        case 70: 
          { return new Symbol(symb.LOOPNE, yychar, yyline, yytext());
          }
        case 122: break;
        case 62: 
          { return new Symbol(symb.IDIV, yychar, yyline, yytext());
          }
        case 123: break;
        case 21: 
          { return new Symbol(symb.DX, yychar, yyline, yytext());
          }
        case 124: break;
        case 56: 
          { return new Symbol(symb.JNA, yychar, yyline, yytext());
          }
        case 125: break;
        case 60: 
          { return new Symbol(symb.ENDP, yychar, yyline, yytext());
          }
        case 126: break;
        case 2: 
          { return new Symbol(symb.Simbolo, yychar, yyline, yytext());
          }
        case 127: break;
        case 50: 
          { return new Symbol(symb.MUL, yychar, yyline, yytext());
          }
        case 128: break;
        case 16: 
          { return new Symbol(symb.DB, yychar, yyline, yytext());
          }
        case 129: break;
        case 39: 
          { return new Symbol(symb.JS, yychar, yyline, yytext());
          }
        case 130: break;
        case 38: 
          { return new Symbol(symb.OR, yychar, yyline, yytext());
          }
        case 131: break;
        case 24: 
          { return new Symbol(symb.BL, yychar, yyline, yytext());
          }
        case 132: break;
        case 65: 
          { return new Symbol(symb.MACRO, yychar, yyline, yytext());
          }
        case 133: break;
        case 26: 
          { return new Symbol(symb.BH, yychar, yyline, yytext());
          }
        case 134: break;
        case 13: 
          { return new Symbol(symb.Etiqueta, yychar, yyline, yytext());
          }
        case 135: break;
        case 32: 
          { return new Symbol(symb.AX, yychar, yyline, yytext());
          }
        case 136: break;
        case 68: 
          { return new Symbol(symb.DUP, yychar, yyline, yytext());
          }
        case 137: break;
        case 59: 
          { return new Symbol(symb.ENDM, yychar, yyline, yytext());
          }
        case 138: break;
        case 7: 
          { return new Symbol(symb.Dos_puntos, yychar, yyline, yytext());
          }
        case 139: break;
        case 46: 
          { return new Symbol(symb.ADD, yychar, yyline, yytext());
          }
        case 140: break;
        case 55: 
          { return new Symbol(symb.JGE, yychar, yyline, yytext());
          }
        case 141: break;
        case 23: 
          { return new Symbol(symb.BP, yychar, yyline, yytext());
          }
        case 142: break;
        case 67: 
          { return new Symbol(symb.CODE, yychar, yyline, yytext());
          }
        case 143: break;
        case 10: 
          { return new Symbol(symb.Corchete_a, yychar, yyline, yytext());
          }
        case 144: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(symb.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
